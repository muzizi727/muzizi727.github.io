<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>字符串常量池和基本类型的常量池</title>
    <link href="/2022/09/28/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F%E6%B1%A0%E5%92%8C%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%B8%B8%E9%87%8F%E6%B1%A0/"/>
    <url>/2022/09/28/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F%E6%B1%A0%E5%92%8C%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%B8%B8%E9%87%8F%E6%B1%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="字符串常量池和基本类型的常量池"><a href="#字符串常量池和基本类型的常量池" class="headerlink" title="字符串常量池和基本类型的常量池"></a>字符串常量池和基本类型的常量池</h1><p>常量池是为了避免频繁的创建和销毁对象而影响系统性能，其实现了对象的共享。</p><h2 id="String-Pool"><a href="#String-Pool" class="headerlink" title="String Pool"></a>String Pool</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>字符串常量池（String Pool）保存着所有的字符串字面量（literal strings），这些值在编译时期就确定，常量池类似于<code>Java</code>系统级别提供的缓存，存放对象和引用。</p><ul><li><code>String Pool</code>的底层类似一个固定大小的<code>HashTable</code>，每个元素都是<code>key-value</code>结构，采用了数组+单向链表的实现方式，因此也被称为<code>StringTable</code>。其默认大小为60013，这个值可以通过<code>-XX:StringTableSize</code>设置大小</li><li><code>JDK1.6</code>中，字符串常量池放在永久代，从<code>JDK1.7</code>开始字符串常量池被移到了堆中，<code>JDK1.8</code>之后元空间取代了永久代，运行时常量池在元空间，字符串常量池依然在堆中</li><li>字符串面量在类加载时存入到常量池，常量池中的信息都会被加载到运行时常量池中，此时字符串还是常量池中的符号，并不是字符串对象。即第一次使用时才会变为对象，可以避免重复创建字符串对象</li><li>可以使用<code>String</code>的<code>intern()</code>方法将字符串添加到字符串常量池中</li></ul><h3 id="intern方法"><a href="#intern方法" class="headerlink" title="intern方法"></a>intern方法</h3><p><code>intern()</code>方法会将字符串字符串对象尝试放入串池，但是不同<code>JDK</code>版本实现不一样：</p><ul><li><code>JDK1.6</code>：<strong>串池中如果有则不放入，如果没有则将此对象复制一份，然后将副本放入串池，会将串池中的对象返回</strong></li><li><code>JDK1.8</code>：<strong>串池中如果有则不会放入，如果没有则会将对象的引用地址复制一份放入串池，最后将串池中的引用地址返回</strong></li></ul><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringPoolTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;1&quot;</span>);<br>        s.intern();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1&quot;</span>;<br>        System.out.println(s == s2);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;1&quot;</span>) + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;1&quot;</span>);<br>        s3.intern();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;11&quot;</span>;<br>        System.out.println(s3 == s4);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果为：</p><ul><li><code>JDK</code>6下<code>false</code> <code>false</code></li><li><code>JDK8</code>下<code>false</code> <code>true</code></li></ul><h4 id="JDK6"><a href="#JDK6" class="headerlink" title="JDK6"></a>JDK6</h4><p><img src="/img/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F%E6%B1%A0%E5%92%8C%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%B8%B8%E9%87%8F%E6%B1%A0.assets/4903ce64.png" alt="jdk6图"></p><p><strong>注：途中绿色线条代表<code>String</code>对象的内容指向。黑色线条代表地址指向。</strong></p><p>如上图所示。首先说一下<code>JDK6</code>中的情况，在<code>JDK6</code>中都是<code>false</code>，因为<code>JDK6</code>中串池是放在<code>Perm</code>区中，<code>Perm</code>区和<code>Heap</code>区是完全分开的。如果使用引用声明的字符串都是会直接在字符串常量池中生成，而<code>new</code>出来的<code>String</code>对象放在<code>Heap</code>区域。所以拿一个<code>Heap</code>区域的对象和字符串常量池中的对象比较是肯定不相同的。</p><h4 id="JDK8"><a href="#JDK8" class="headerlink" title="JDK8"></a>JDK8</h4><p><code>JDK8</code>中移除了<code>Perm</code>，增加了元空间。但是其实从<code>JDK7</code>开始就把字符串常量池从<code>Perm</code>区域移动到<code>Heap</code>区域了，主要是因为<code>Perm</code>区域默认大小只有4m，一旦字符串常量池中有大量对象会直接产生<code>java.lang.OutOfMemoryError: PermGen space</code>错误。</p><p><img src="/img/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F%E6%B1%A0%E5%92%8C%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%B8%B8%E9%87%8F%E6%B1%A0.assets/image-20220925210719444.png" alt="JDK8"></p><ol><li><code>String s = new String(&quot;1&quot;);</code>第一句代码生成2个对象。常量池中的“1”和<code>Heap</code>中的字符串对象。<code>s.intern();</code>去常量池中寻找发现“1“已经在常量池中了。</li><li><code>String s2 = &quot;1&quot;;</code>这句代码生成一个s2的引用指向字符串常量池中的”1“对象。结果就是s和s2的引用地址不同。</li><li><code>String s3 = new String(&quot;1&quot;) + new String(&quot;1&quot;);</code>这句代码中先生成4个对象，字符串常量池中的”1“和Heap中s3引用指向的对象。中间还有2个匿名的<code>new String(&quot;1&quot;)</code>对象。此时s3指向的对象内容是”11”，但此时字符串常量池中是没有“11”对象的。</li><li>接下来<code>s3.intern();</code>会将s3中的“11”字符串放入字符串常量池中，因为此时常量池中不存在“11”字符串。<code>JDK6</code>的做法是在常量池中直接生成一个“11”的对象。但是从<code>JDK7</code>开始常量池不在<code>Perm</code>区域了，这块做了调整。常量池中不再需要存储一份对象了，可以直接存储堆中对象的引用。这里引用直接指向s3引用的对象。也就是说引用地址相同。</li><li>最后<code>String s4 = &quot;11&quot;;</code>这里的“11”是显示声明的，因此会直接去常量池中创建，创建的时候发现已经有这个对象了，此时就是指向s3引用对象的一个引用。所以s4的引用指向和s3一样。最后比较<code>s3 == s4</code> 是<code>true</code>。</li></ol><h3 id="常量池设置"><a href="#常量池设置" class="headerlink" title="常量池设置"></a>常量池设置</h3><ul><li><code>-XX:StringTableSize</code> 可以设置字符串常量池的大小</li><li><code>-XX:+PrintStringTableStatistics</code>在JVM进程退出时，打印出StringTable的统计信息输出到gclog中.</li></ul><h2 id="包装类的常量池"><a href="#包装类的常量池" class="headerlink" title="包装类的常量池"></a>包装类的常量池</h2><h3 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h3><p><code>Java</code>中基本类型的包装类除了<code>Long</code>和<code>Double</code>之外都实现了常量池技术。具体的实现方式为在类中预先创建频繁使用的包装类对象，当需要使用某个包装类对象时，如果该对象封装的值在缓存范围内，就返回缓存对象，否则创建新的对象并返回。</p><p>缓存范围：</p><table><thead><tr><th>包装类型</th><th>基本数据类型</th><th>缓存对象（基本数据类型值）</th></tr></thead><tbody><tr><td>Boolean</td><td>boolean</td><td>true,false（全部值）</td></tr><tr><td>Byte</td><td>byte</td><td>-128~127（全部值）</td></tr><tr><td>Short</td><td>short</td><td>-128~127</td></tr><tr><td>Character</td><td>char</td><td>0~127</td></tr><tr><td>Integer</td><td>int</td><td>-128~127（默认为127）</td></tr><tr><td>Long</td><td>long</td><td>-128~127</td></tr><tr><td>Float</td><td>float</td><td>无缓存值</td></tr><tr><td>Double</td><td>double</td><td>无缓存值</td></tr></tbody></table><h3 id="Integer"><a href="#Integer" class="headerlink" title="Integer"></a>Integer</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><p><code>Integer</code>的默认缓存范围为-128到127，可以通过jvm参数改变这个范围。</p><ul><li>缓存上界high可以通过jvm参数<code>-XX:AutoBoxCacheMax=size</code>或者<code>java -D java.lang.Integer.IntegerCache.high=size TestAutoBoxCache</code>指定，取指定值与127的最大值并且不超过Integer表示范围，</li><li>下界不能指定，只能为-128。</li></ul><h4 id="问题解析"><a href="#问题解析" class="headerlink" title="问题解析"></a>问题解析</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IntegerTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i3</span> <span class="hljs-operator">=</span> <span class="hljs-number">128</span>;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i4</span> <span class="hljs-operator">=</span> <span class="hljs-number">128</span>;<br><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">100</span>);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i6</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">100</span>);<br><br>        System.out.println(i1 == i2);<br>        System.out.println(i3 == i4);<br>        System.out.println(i5 == i6);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shel">true<br>false<br>false<br></code></pre></td></tr></table></figure><p>面试的时候经常会遇到这种问题，其实就是考<code>Integer</code>类型的缓存范围，<strong>注意<code>new</code>会生成新对象无法使用缓存池</strong>。</p><h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IntegerCache</span> &#123;<br>     <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">low</span> <span class="hljs-operator">=</span> -<span class="hljs-number">128</span>;<br>     <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> high;<br>     <span class="hljs-comment">//声明为final，所以缓存的对象会放入常量池中</span><br>     <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Integer cache[];<br><br>     <span class="hljs-keyword">static</span> &#123;<br>         <span class="hljs-comment">// high value may be configured by property</span><br>         <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> <span class="hljs-number">127</span>;<br>         <span class="hljs-comment">//获取输入的最大值</span><br>         <span class="hljs-type">String</span> <span class="hljs-variable">integerCacheHighPropValue</span> <span class="hljs-operator">=</span><br>             sun.misc.VM.getSavedProperty(<span class="hljs-string">&quot;java.lang.Integer.IntegerCache.high&quot;</span>);<br>         <span class="hljs-keyword">if</span> (integerCacheHighPropValue != <span class="hljs-literal">null</span>) &#123;<br>             <span class="hljs-keyword">try</span> &#123;<br>                 <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> parseInt(integerCacheHighPropValue);<br>                 <span class="hljs-comment">//如果输入的最大值比127小 取127</span><br>                 i = Math.max(i, <span class="hljs-number">127</span>);<br>                 <span class="hljs-comment">// Maximum array size is Integer.MAX_VALUE</span><br>                 <span class="hljs-comment">//防止输入的值超过整型最大值</span><br>                 h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="hljs-number">1</span>);<br>             &#125; <span class="hljs-keyword">catch</span>( NumberFormatException nfe) &#123;<br>                 <span class="hljs-comment">// If the property cannot be parsed into an int, ignore it.</span><br>             &#125;<br>         &#125;<br>         high = h;<br><span class="hljs-comment">//计算出缓存区的数量</span><br>         cache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>[(high - low) + <span class="hljs-number">1</span>];<br>         <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> low;<br>         <span class="hljs-comment">//循环给缓存区赋值</span><br>         <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; cache.length; k++)<br>             cache[k] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(j++);<br><br>         <span class="hljs-comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span><br>         <span class="hljs-keyword">assert</span> IntegerCache.high &gt;= <span class="hljs-number">127</span>;<br>     &#125;<br><br>     <span class="hljs-keyword">private</span> <span class="hljs-title function_">IntegerCache</span><span class="hljs-params">()</span> &#123;&#125;<br> &#125;<br></code></pre></td></tr></table></figure><p>当发生自动装箱的时候，调用<code>valueOf()</code>方法，对需要包装的基本类型的值进行判断，如果在缓存范围内，则返回缓存对象，否则创建一个新的对象返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title function_">valueOf</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>    <span class="hljs-comment">//判断是否在缓存范围</span><br>    <span class="hljs-keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)<br>        <span class="hljs-keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(i);<br>&#125;<br></code></pre></td></tr></table></figure><p>其他包装类型实现方式类似，可自行查看。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://tech.meituan.com/2014/03/06/in-depth-understanding-string-intern.html">深入解析String#intern - 美团技术团队 (meituan.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java集合之List</title>
    <link href="/2022/09/18/Java%E9%9B%86%E5%90%88%E4%B9%8BList/"/>
    <url>/2022/09/18/Java%E9%9B%86%E5%90%88%E4%B9%8BList/</url>
    
    <content type="html"><![CDATA[<h1 id="Java集合之List"><a href="#Java集合之List" class="headerlink" title="Java集合之List"></a>Java集合之List</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>List</code>子接口是<code>Collection</code>中最为常用的一个子接口。</p><p><code>List</code>系列集合有索引，所以多了很多按照索引操作元素的功能</p><p><code>List</code>系列集合：</p><ul><li><code>Vector</code></li><li><code>ArrayList</code></li><li><code>LinkedList</code></li></ul><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><p><code>ArrayList</code>是比较常用的一个集合类。继承自<code>AbstractList</code>，实现了<code>List</code>接口。底层基于<strong>数组</strong>实现，容量大小动态变化。允许null值，查询快，增删慢，支持随机访问。</p><p><img src="/img/Java%E9%9B%86%E5%90%88%E4%B9%8BList.assets/ArrayList-1-768x406-1.png" alt="ArrayList"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayList</span>&lt;E&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractList</span>&lt;E&gt;<br>        <span class="hljs-keyword">implements</span> <span class="hljs-title class_">List</span>&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable<br></code></pre></td></tr></table></figure><ul><li><code>RandomAccess</code>是一个标志接口，表示是否支持<strong>快速随机访问</strong></li><li><code>Cloneable</code>克隆标志接口，同时实现<code>clone()</code>方法，能被克隆</li><li><code>Serializable</code>序列化接口，意味着<code>ArrayList</code>支持序列化，能通过序列化传输</li></ul><h3 id="常用方法："><a href="#常用方法：" class="headerlink" title="常用方法："></a>常用方法：</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>public boolean add(E e)</code></td><td>添加元素到集合的末尾</td></tr><tr><td><code>public boolean addAll(Collection&lt;? extends E&gt; c)</code></td><td>将指定的集合添加到末尾</td></tr><tr><td><code>public void clear()</code></td><td>清除集合中的所有元素</td></tr><tr><td><code>public E get(int index)</code></td><td>返回集合中指定位置的元素</td></tr><tr><td><code>public E remove(int index)</code></td><td>删除集合中指定位置的元素，并将删除的元素返回</td></tr><tr><td><code>public int size()</code></td><td>返回集合中元素的个数</td></tr><tr><td><code>public boolean isEmpty()</code></td><td>返回集合中元素的个数是否为空</td></tr><tr><td><code>public int indexOf(Object o)</code></td><td>返回元素中指定对象出现的第一个索引，不包含返回-1</td></tr><tr><td><code>public boolean contains(Object o)</code></td><td>返回集合中是否包含指定对象</td></tr></tbody></table><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><ul><li><p>构造方法：以无参的构造方法创建<code>ArrayList</code>时，实际上初始化赋值的是一个空数组。当真正对数组进行添加元素时，才真正分配容量（懒惰初始化），即向数组中添加第一个元素时，数组容量扩为10</p></li><li><p>添加元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// e 插入的元素  elementData底层数组   size 插入的位置</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>    ensureCapacityInternal(size + <span class="hljs-number">1</span>);<span class="hljs-comment">// Increments modCount!!</span><br>    elementData[size++] = e;<span class="hljs-comment">// 插入size位置，然后加一</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ensureCapacityInternal</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br>    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ensureExplicitCapacity</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br>    modCount++;<br><br>    <span class="hljs-comment">// overflow-conscious code</span><br>    <span class="hljs-keyword">if</span> (minCapacity - elementData.length &gt; <span class="hljs-number">0</span>)<br>        grow(minCapacity);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calculateCapacity</span><span class="hljs-params">(Object[] elementData, <span class="hljs-type">int</span> minCapacity)</span> &#123;<br>    <span class="hljs-comment">//判断elementData是否是空数组</span><br>    <span class="hljs-keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;<br>        <span class="hljs-comment">//如果是空数组返回默认值和传入的大小中=的最小值</span><br>        <span class="hljs-keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);<br>    &#125;<br>    <span class="hljs-keyword">return</span> minCapacity;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 判断是否需要扩容</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ensureExplicitCapacity</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br>    modCount++;<br>    <span class="hljs-comment">// 索引越界</span><br>    <span class="hljs-keyword">if</span> (minCapacity - elementData.length &gt; <span class="hljs-number">0</span>)<br>        <span class="hljs-comment">// 调用grow方法进行扩容，调用此方法代表已经开始扩容了</span><br>        grow(minCapacity);<br>&#125;<br></code></pre></td></tr></table></figure><p>指定位置新增元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> index, E element)</span> &#123;<br>    <span class="hljs-comment">//判断传入的index是否合法</span><br>    rangeCheckForAdd(index);<br>    ensureCapacityInternal(size + <span class="hljs-number">1</span>);  <span class="hljs-comment">// Increments modCount!!</span><br>    <span class="hljs-comment">// 将指定索引后的数据后移</span><br>    System.arraycopy(elementData, index, elementData, index + <span class="hljs-number">1</span>, size - index);<br>    elementData[index] = element;<br>    size++;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>扩容：扩容后的大小为<code>oldCapacity + (oldCapacity &gt;&gt; 1)</code>，<code>oldCapacity &gt;&gt; 1</code> 需要取整，所以新容量大约是旧容量的 1.5 倍左右，即 <code>oldCapacity+oldCapacity/2</code></p><p>扩容需要把原数组整个都复制到新数组中，这个操作代价很高，因此最好在创建<code>ArrayList</code>对象的时候指定合适的大小，避免频繁扩容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">grow</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br>    <span class="hljs-comment">//原数组长度</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">oldCapacity</span> <span class="hljs-operator">=</span> elementData.length;<br>    <span class="hljs-comment">//新数组长度</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">newCapacity</span> <span class="hljs-operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="hljs-number">1</span>);<br>    <span class="hljs-comment">//检查新容量是否大于最小需要容量，若小于最小需要容量，就把最小需要容量当作数组的新容量</span><br>    <span class="hljs-keyword">if</span> (newCapacity - minCapacity &lt; <span class="hljs-number">0</span>)<br>newCapacity = minCapacity;<span class="hljs-comment">//不需要扩容计算</span><br>    <span class="hljs-comment">//检查新容量是否大于最大数组容量</span><br>    <span class="hljs-keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="hljs-number">0</span>)<br>        <span class="hljs-comment">//如果minCapacity大于最大容量，则新容量则为`Integer.MAX_VALUE`</span><br>        <span class="hljs-comment">//否则，新容量大小则为 MAX_ARRAY_SIZE 即为 `Integer.MAX_VALUE - 8`</span><br>        newCapacity = hugeCapacity(minCapacity);<br>    <span class="hljs-comment">//复制元素</span><br>    elementData = Arrays.copyOf(elementData, newCapacity);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>删除元素：需要调用<code>System.arraycopy()</code>将<code>index+1</code>后面的元素都复制到<code>index</code>位置上，在旧数组上操作，该操作的时间复杂度为O(N)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> E <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-comment">//判断传入的index是否超过最大值</span><br>    rangeCheck(index);<br><span class="hljs-comment">//记录变化次数</span><br>    modCount++;<br>    <span class="hljs-comment">//查找到指定的元素</span><br>    <span class="hljs-type">E</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> elementData(index);<br><span class="hljs-comment">//计算要移动的元素个数</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">numMoved</span> <span class="hljs-operator">=</span> size - index - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (numMoved &gt; <span class="hljs-number">0</span>)<br>        <span class="hljs-comment">//移动元素</span><br>        System.arraycopy(elementData, index+<span class="hljs-number">1</span>, elementData, index,<br>                         numMoved);<br>    elementData[--size] = <span class="hljs-literal">null</span>; <span class="hljs-comment">// clear to let GC do its work</span><br><br>    <span class="hljs-keyword">return</span> oldValue;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Fail-Fast：快速失败，在<code>ArrayList</code>有两个关键的参数<code>modCount</code>、<code>expectedModCount</code>，每此修改集合(调用<code>add()、remove()、clear()</code>)，<code>modCount</code>都会增加1，<code>expectedModCount</code>则为期待的运算计数。在进行迭代或者序列化等操作时，会比较<code>modCount</code>和<code>expectedModCount</code>值是否相等，如果不等说明操作中集合被修改，抛出<code>ConcurrentModificationException</code> 异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Iterator&lt;E&gt; <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Itr</span>();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Itr</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterator</span>&lt;E&gt; &#123;<br>        <span class="hljs-type">int</span> cursor;       <span class="hljs-comment">// index of next element to return</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">lastRet</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>; <span class="hljs-comment">// index of last element returned; -1 if no such</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">expectedModCount</span> <span class="hljs-operator">=</span> modCount;<br><br>        Itr() &#123;&#125;<br><br>        <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>        <span class="hljs-keyword">public</span> E <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-comment">//检查结构是否发生变化</span><br>            checkForComodification();<br>            <span class="hljs-comment">//...</span><br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span> (lastRet &lt; <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>();<br>            <span class="hljs-comment">//检查结构是否发生变化</span><br>            checkForComodification();<br>            <span class="hljs-keyword">try</span> &#123;<br>                ArrayList.<span class="hljs-built_in">this</span>.remove(lastRet);<br>                cursor = lastRet;<br>                lastRet = -<span class="hljs-number">1</span>;<br>                <span class="hljs-comment">//删除之后重置expectedModCount</span><br>                expectedModCount = modCount;<br>            &#125; <span class="hljs-keyword">catch</span> (IndexOutOfBoundsException ex) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentModificationException</span>();<br>            &#125;<br>        &#125;<br><span class="hljs-comment">//判断modCount 如果被其他线程修改抛出并发修改异常</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkForComodification</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span> (modCount != expectedModCount)<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentModificationException</span>();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><p><code>Vector</code>类实现了一个动态数组，和<code>ArrayList</code>类似。</p><p>扩容：<code>Vector</code>的构造函数可以传入<code>capacityIncrement</code>参数，作用是扩容的时候的步长，如果这个参数小于等于0(默认0)，每次扩容的都是原数组的两倍。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Vector</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity, <span class="hljs-type">int</span> capacityIncrement)</span> <br></code></pre></td></tr></table></figure><p>对比<code>ArrayList</code>：</p><ul><li><code>Vector</code>线程安全，方法上使用了<code>synchronized</code>关键字修饰</li><li><code>Vector</code>每次扩容其大小的2倍(也可以通过构造函数指定增长的容量)，而<code>ArrayList</code>是1.5倍</li><li><code>Vector</code>类包含了许多传统的方法，这些方法不属于集合框架。如<code>indexOf(obj, start)</code></li></ul><h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p><code>LinkedList</code>采用链表结构保存对象，这种结构的优点是便于向集合中插入或者删除元素。需要频繁的向集合中插入或者删除元素时，使用<code>LinkedList</code>类比<code>ArrayList</code>效率高。但<code>LinkedList</code>随机访问元素的速度相对较慢。</p><p>链表分为单向链表和双向链表，单向链表一个<code>node</code>节点包含两个属性，当前节点的值和下一个元素的链接。</p><p><img src="/img/Java%E9%9B%86%E5%90%88%E4%B9%8BList.assets/image-20220920220135394.png" alt="单向链表"></p><p>双向链表一个<code>node</code>节点包含三个属性，当前节点的值、前一个节点的链接和后一个节点的链接。</p><p><img src="/img/Java%E9%9B%86%E5%90%88%E4%B9%8BList.assets/image-20220920221018846.png" alt="双向链表"></p><p><code>LinkedList</code>中的<code>node</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&lt;E&gt; &#123;<br>    E item;<br>    Node&lt;E&gt; next;<br>    Node&lt;E&gt; prev;<br><br>    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;<br>        <span class="hljs-built_in">this</span>.item = element;<br>        <span class="hljs-built_in">this</span>.next = next;<br>        <span class="hljs-built_in">this</span>.prev = prev;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>LinkedList</code>类结构：</p><p><img src="/img/Java%E9%9B%86%E5%90%88%E4%B9%8BList.assets/linkedlist-2020-11-16.png" alt="LinkedList"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkedList</span>&lt;E&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractSequentialList</span>&lt;E&gt;<br>    <span class="hljs-keyword">implements</span> <span class="hljs-title class_">List</span>&lt;E&gt;, Deque&lt;E&gt;, Cloneable, java.io.Serializable<br></code></pre></td></tr></table></figure><ul><li><code>Deque</code>双端队列，两端都可以进出</li><li>其他实现的接口和<code>ArrayList</code>相同</li></ul><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><p><code>LinkedList</code>除了拥有<code>List</code>集合的全部功能还拥有很多队列的方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>public boolean add(E e)</code></td><td>将元素添加到集合尾部，返回是否成功</td></tr><tr><td><code>public E poll()</code></td><td>删除并返回第一个元素</td></tr><tr><td><code>public void addFirst(E e)</code></td><td>将元素添加到集合的头部</td></tr><tr><td><code>public E getFirst()</code></td><td>获取集合中第一个元素</td></tr><tr><td><code>public void addLast(E e)</code></td><td>将元素添加到集合的尾部</td></tr><tr><td><code>public E getLast()</code></td><td>获取集合中最后一个元素</td></tr><tr><td><code>public E pop()</code></td><td>将集合中的元素出栈（后入先出）</td></tr><tr><td><code>public void push(E e)</code></td><td>将元素入栈（先入后出）</td></tr></tbody></table><h3 id="对比ArrayList"><a href="#对比ArrayList" class="headerlink" title="对比ArrayList"></a>对比ArrayList</h3><ol><li>底层结构：<ul><li><code>ArrayList</code>底层基于数组</li><li><code>LinkedList</code>底层基于双向链表（<code>JDK1.6</code>之前为循环链表，<code>JDK1.7</code>之后为双向链表）</li></ul></li><li>插入和删除：<ul><li><code>ArrayList</code>底层采用数组，对于数组中的元素插入或者删除需要移动元素，效率较低</li><li><code>LinkedList</code>底层基于双向链表，插入和删除不需要移动其他元素，效率较高</li></ul></li><li>随机访问：<ul><li><code>ArrayList</code>可以根据<code>index</code>直接获取元素O(1)，支持随机访问</li><li><code>LinkedList</code>不支持随机访问，需要移动指针一个个寻找O(n)</li></ul></li><li>内存空间：<ul><li><code>ArrayList</code>的空间浪费主要表现在<code>List</code>扩容后，不管有没有用到都会占用</li><li><code>LinkedList</code>每个节点都需要保存前驱节点和后继节点的地址以及元素值，所占空间比<code>ArrayList</code>更多</li></ul></li></ol><h3 id="性能比较"><a href="#性能比较" class="headerlink" title="性能比较"></a>性能比较</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//新增元素循环次数</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">addCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">100000</span>;<br>    <span class="hljs-comment">//获取元素次数</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">getCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><br>    <span class="hljs-type">ThreadLocalRandom</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> ThreadLocalRandom.current();<br>    <span class="hljs-type">StopWatch</span> <span class="hljs-variable">stopWatch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StopWatch</span>(<span class="hljs-string">&quot;list&quot;</span>);<br>    ArrayList&lt;Integer&gt; arrayList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    stopWatch.start(<span class="hljs-string">&quot;arrayList add&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; addCount; i++) &#123;<br>        arrayList.add(i);<br>    &#125;<br>    stopWatch.stop();<br><br>    LinkedList&lt;Integer&gt; linkedList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>    stopWatch.start(<span class="hljs-string">&quot;linkedList add&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; addCount; i++) &#123;<br>        linkedList.add(i);<br>    &#125;<br>    stopWatch.stop();<br><br>    stopWatch.start(<span class="hljs-string">&quot;arrayList random get&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; getCount; i++) &#123;<br>        arrayList.get(random.nextInt(addCount));<br>    &#125;<br>    stopWatch.stop();<br><br>    stopWatch.start(<span class="hljs-string">&quot;linkedList random get&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; getCount; i++) &#123;<br>        linkedList.get(random.nextInt(addCount));<br>    &#125;<br>    stopWatch.stop();<br>    System.out.println(stopWatch.prettyPrint());<br>&#125;<br></code></pre></td></tr></table></figure><p>控制台输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shel">StopWatch &#x27;list&#x27;: running time = 47682200 ns<br>---------------------------------------------<br>ns         %     Task name<br>---------------------------------------------<br>012813500  027%  arrayList add<br>007278300  015%  linkedList add<br>000141900  000%  arrayList random get<br>027448500  058%  linkedList random get<br><br><br>进程已结束,退出代码0<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/Seazean/JavaNote/blob/main/Java.md">JavaNote&#x2F;Java.md at main · Seazean&#x2F;JavaNote (github.com)</a></p><p><a href="https://www.runoob.com/java/java-arraylist.html">Java ArrayList | 菜鸟教程 (runoob.com)</a></p><p><a href="https://www.runoob.com/java/java-linkedlist.html">Java LinkedList | 菜鸟教程 (runoob.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java集合</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java容器</title>
    <link href="/2022/09/17/Java%E5%AE%B9%E5%99%A8/"/>
    <url>/2022/09/17/Java%E5%AE%B9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Java容器"><a href="#Java容器" class="headerlink" title="Java容器"></a>Java容器</h1><blockquote><p>容器主要包括<code>Collection</code>和<code>Map</code>两种，<code>Collection</code>存储着对象的集合，而<code>Map</code>存储着键值对（两个对象）的映射表。</p></blockquote><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><blockquote><p>数据结构是计算机存储、组织数据的方式。数据结构是指相互之间存在一种或者多种特定关系的数据元素的集合。通常情况下，精心选择的数据结构可以带来更高的运行或者存储效率。数据结构往往同高效的检索算法和索引技术相关。</p></blockquote><p>数据存储常用的结构有：数组、栈、队列、链表、树</p><ul><li>数组：数组是在内存中的区域是连续的，分成若干等分大小相同的区域<ul><li>优点：查询速度快（根据索引直接查找，时间复杂度O(1)）</li><li>缺点：增删元素慢（需要移动其他元素）</li></ul></li><li>栈：先进后出（FILO）</li><li>队列：先进先出（FIFO）</li><li>链表：链表在内存中的区域不是连续的，每个元素都会记录下一个元素的地址<ul><li>优点：增删元素速度快</li><li>缺点：查询速度慢，每个元素所占内存较大（需要存储其他节点地址信息）</li></ul></li><li>树：<ul><li>二叉树：二叉树只有一个根节点，每个节点最多只能有两个子树，且有左右之分<ul><li>优点：查询效率较高，平均时间复杂度O(lgn)</li><li>缺点：不自动调整，导致查询效率不稳定，极端情况下会退化成链表O(n)</li></ul></li><li>平衡二叉树（AVL）：AVL是严格的平衡二叉树，所有节点的左右子树高度差不能超过1；AVL树查找、插入和删除的平均和最坏情况都是O(lgn)<ul><li>优点：查询效率稳定，避免了二叉树出现的极端情况</li><li>缺点：由于太过严格，每次增删有可能破坏AVL树的平衡，需要旋转来调整树的平衡；在删除操作多时，维护平衡的代价可能高于其带来的好处，因此AVL树实际使用不多</li></ul></li><li>红黑树：与AVL树相比，红黑树并不追求严格的平衡，而是大致的平衡。<ul><li>优点：相比较AVL树，删除效率大大提高，当插入或删除数据时，只需要进行O(1)次数的旋转以及变色就能保证基本平衡，总的来说红黑树的统计性能高于AVL树，因此在实际应用中，AVL树使用的相对较少，而红黑树的使用非常广泛。</li><li>缺点：读取略逊于AVL树</li></ul></li></ul></li></ul><p>各数据结构时间复杂度对比：</p><p><img src="/img/Java%E5%AE%B9%E5%99%A8.assets/image-20220917205613155.png" alt="复杂度对比"></p><p>图片来源：<a href="https://www.bigocheatsheet.com/">https://www.bigocheatsheet.com/</a></p><h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>在编程时，可以使用数组来保存多个对象，但是数组的长度不可变化，一旦在初始化数组时指定了数组长度，这个长度就是不可变的。</p><p>为了保存不确定的数据，<code>Java</code>提供了集合类。集合类是一个大小可变的容器，主要负责保存其他数据，容器中的每个数据称为一个元素，因此集合也被称为容器类。</p><p><code>Java</code>所有的集合类都位于<code>Java.util</code>包下，提供了一个表示和操作对象集合的统一框架，包含大量集合接口，以及这些接口的实现类和操作它们的方法。</p><p>集合与数组的区别：</p><ul><li>数组的长度不可变，集合的长度可以变化</li><li>数组可以保存基本数据类型和引用类型，集合只能保存引用类型</li></ul><p><code>Java</code>中的集合代表是<code>Collection</code>,<code>Collection</code>主要有三个子接口，分别为<code>Set</code>、<code>List</code>、<code>Queue</code>。其中<code>List</code>和<code>Queue</code>中的元素可以重复，而<code>Set</code>中的元素不可重复。</p><p><img src="/img/Java%E5%AE%B9%E5%99%A8.assets/image-20191208220948084.png" alt="Collection"></p><h3 id="1-Set"><a href="#1-Set" class="headerlink" title="1.Set"></a>1.Set</h3><blockquote><p><code>Set</code>集合：添加的元素是无序、不重复、无索引</p></blockquote><ul><li><code>TreeSet</code>：基于<code>TreeMap</code>实现，查找效率O(lgn)慢于<code>HashSet</code>O(1)，集合中元素有序</li><li><code>HashSet</code>：基于<code>HashMap</code>实现，支持快速查找，集合中元素无序</li><li><code>LinkedHashSet</code>：基于<code>LinkedHashMap</code>实现，在<code>HashMap</code>的基础上，增加了一个双向链表来记录元素添加顺序。</li></ul><h3 id="2-List"><a href="#2-List" class="headerlink" title="2.List"></a>2.List</h3><blockquote><p>List集合：添加的元素有序、可重复、有索引</p></blockquote><ul><li><code>ArrayList</code>：基于动态数组实现，支持随机访问</li><li><code>Vector</code>：历史遗留类和<code>ArrayList</code>类似，但它是线程安全的，效率低</li><li><code>LinkedList</code>：基于双向链表实现，只能顺序访问，可以快速的在链表中间增删数据。不仅如此，<code>LinkedList</code>还可以用作栈、队列和双向队列</li></ul><h3 id="3-Queue"><a href="#3-Queue" class="headerlink" title="3.Queue"></a>3.Queue</h3><blockquote><p>Queue：支持FIFO，尾部添加、头部删除，和我们生活中排队类似</p></blockquote><ul><li><code>LinkedList</code>：<code>LinkedList</code>类实现了<code>Queue</code>接口，因此我们可以把它当作<code>Queue</code>使用</li><li><code>PriorityQueue</code>：基于堆结构实现，优先队列，可以根据规则排序</li></ul><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p><code>Map</code>是一种键值对（<code>key</code>-<code>value</code>）集合,<code>Map</code>集合中的每一个元素都包含一个键对象和一个值对象。其中，键对象不允许重复，而值对象可以重复。</p><p><img src="/img/Java%E5%AE%B9%E5%99%A8.assets/image-20201101234335837.png" alt="Map结构"></p><ul><li><code>TreeMap</code>：基于红黑树实现，查找效率O(lgn)，集合中的元素有序</li><li><code>HashMap</code>：基于哈希表实现，查找效率高O(1)，集合中的元素无序</li><li><code>HashTable</code>：和<code>HashMap</code>类似，但是线程安全，历史遗留类，效率较低，不建议使用</li><li><code>LinkedHashMap</code>：使用双向链表来维护元素的顺序</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java容器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java中的字符串</title>
    <link href="/2022/09/12/Java%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2022/09/12/Java%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="Java中的字符串"><a href="#Java中的字符串" class="headerlink" title="Java中的字符串"></a>Java中的字符串</h1><p>Java提供了<code>String</code>、<code>StringBuffer</code>和<code>StringBuilder</code>类来封装字符串，并提供了一系列操作字符串对象的方法。它们的相同点都是用来封装字符串；并且都实现了<code>CharSequence</code>接口。</p><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p><code>String</code>类的<code>value</code>数组被声明为<code>final</code>，这意味着<code>value</code>数组初始化之后不能再引用其他数组，并且<code>String</code>内部没有改变<code>value</code>数组的方法，因此可以保证<code>String</code>不可变，同时保证线程安全。<code>String</code>类被声明为<code>final</code>，因此不可被继承。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">String</span><br>    <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.io.Serializable, Comparable&lt;String&gt;, CharSequence &#123;<br>    <span class="hljs-comment">/** The value is used for character storage. */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">char</span> value[];<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注：</strong>不可变的意思是每次更改都会产生新的字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;a&quot;</span>; <br>s += <span class="hljs-string">&quot;b&quot;</span>;<br></code></pre></td></tr></table></figure><p>以上代码会线程一个字符串”a”对象，并且s指向该对象。然后再生成一个字符串”ab”对象，把s的指向地址改为”ab”对象。</p><h2 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h2><p><code>StringBuffer</code>为字符串变量（线程安全），如果要频繁的对字符串内容进行修改，处于效率考虑最好使用可<code>StringBuffer</code>，如果想转成<code>String</code>类型，可以调用<code>StringBuffer.toString()</code>方法。</p><p><code>StringBuffer</code>上的主要操作是<code>append</code>和<code>insert</code>方法，可重载这些方法以接受任意类型的数据。每个方法都能有效的将给定的数据转换成字符串，然后将该字符串的字符添加或者插入到字符串缓冲区中。</p><ul><li><code>append</code>方法始终将这些字符添加到缓冲区的末端</li><li><code>insert</code>方法则在指定的位置添加字符</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-string">&quot;abc&quot;</span>); <span class="hljs-comment">//生成字符串abc</span><br>    s.append(<span class="hljs-string">&quot;e&quot;</span>); <span class="hljs-comment">//abce</span><br>    s.insert(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;d&quot;</span>);<span class="hljs-comment">//abcde</span><br>    System.out.println(s);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h2><p><code>StringBuilder</code>字符串变量（非线程安全），JDK5.0新增，此类提供一个与<code>StringBuffer</code>兼容的API，但不保证同步。</p><p>在单线程的情况下使用较普遍。</p><p>在大部分情况下<code>StringBuilder &gt; StringBuffer</code>。这主要是因为前者不需要考虑线程安全。</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>三者区别：</p><ul><li><code>String</code>不可变字符串，线程安全</li><li><code>StringBuffer</code>可变的字符串，线程安全，方法上加<code>synchronized</code>关键字，效率较低</li><li><code>StringBuilder</code>可变的字符串，非线程安全，效率较高</li></ul><p>相同点：</p><ul><li>都实现了<code>CharSequence</code>接口</li><li>底层使用<code>char[]</code>存储字符串</li></ul><p>构造方法：</p><ul><li><code>String</code>:</li><li><code>String str = new String(String str);</code>根据输入内容创建不可变的字符串对象</li><li><code>String str = &quot;str&quot;;</code>直接根据字符串的值创建不可变的字符串对象</li><li><code>StringBuffer</code>:<ul><li><code>StringBuffer str = new StringBuffer(String str)</code>根据字符串的内容，来创建可变字符串对象</li><li><code>StringBuffer str = new StringBuffer()</code>创建一个空白的可变字符串对象</li></ul></li><li><code>StringBuilder</code><ul><li><code>StringBuffer str = new StringBuffer(String str)</code>根据字符串的内容，来创建可变字符串对象</li><li><code>StringBuffer str = new StringBuffer()</code>创建一个空白的可变字符串对象</li></ul></li></ul><p><strong>应该怎么选择</strong>：在执行效率方面，<code>StringBuilder</code>最高，<code>Stringbuffer</code>其次，<code>String</code>最低。</p><ul><li>当可以确定字符是不需要改变的或者修改的次数很少那么选择<code>String</code></li><li>如果需要频繁的对字符串进行修改，那么从<code>StringBuffer</code>或者<code>StringBuilder</code>中选择</li><li>优先选择<code>StringBuilder</code>，因为其效率最高，但是当需要保证线程安全时，就要选择<code>StringBuffer</code></li><li>当大致知道整个字符串长度的时候，那么就可以使用<code>StringBuilder</code>带参数的构造参数，就会在构造对象的时候创建指定长度的数组，避免不断扩容导致的底层数组不断复制</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基本数据类型</title>
    <link href="/2022/09/11/Java%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2022/09/11/Java%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Java基本数据类型"><a href="#Java基本数据类型" class="headerlink" title="Java基本数据类型"></a>Java基本数据类型</h1><h2 id="Java中的八种基本类型"><a href="#Java中的八种基本类型" class="headerlink" title="Java中的八种基本类型"></a>Java中的八种基本类型</h2><table><thead><tr><th>类型</th><th>字节</th><th>默认值</th></tr></thead><tbody><tr><td>byte</td><td>1</td><td>0</td></tr><tr><td>short</td><td>2</td><td>0</td></tr><tr><td>int</td><td>4</td><td>0</td></tr><tr><td>long</td><td>8</td><td>0L</td></tr><tr><td>float</td><td>4</td><td>0.0f</td></tr><tr><td>double</td><td>8</td><td>0.0d</td></tr><tr><td>char</td><td>2</td><td>false</td></tr><tr><td>boolean</td><td>1或者4</td><td>\u0000</td></tr></tbody></table><p>  <strong>注：</strong>《Java虚拟机规范》指出boolean当作int处理4个字节，和 boolean 数组当作byte数组处理 1 个字节，具体还要看虚拟机实现是否按照规范来，所以 1 个字节、4 个字节都是有可能的。</p><h2 id="数据的类型转换"><a href="#数据的类型转换" class="headerlink" title="数据的类型转换"></a>数据的类型转换</h2><h3 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h3><h4 id="上下转型"><a href="#上下转型" class="headerlink" title="上下转型"></a>上下转型</h4><p>Java中不能隐式执行向下转型，因为这会使数据表示精度降低，但是可以向上转型，并且遵循以下规则：</p><ul><li>整型、常量、浮点型、字符型数据可以混合运算。</li><li>运算中，不同类型的数据先转换为同一类型，然后进行运算。</li><li>转换等级数据精度由低到高。</li><li>转换等级由低到高：byte，short，char-&gt;int-&gt;long-&gt;float-&gt;double</li></ul><h4 id="表达式数据类型自动提升"><a href="#表达式数据类型自动提升" class="headerlink" title="表达式数据类型自动提升"></a>表达式数据类型自动提升</h4><p>表达式的数据类型自动提升，关于类型的自动提升，注意下面的规则：</p><ul><li>所有的byte、short、char类型的值被提升为int</li><li>如果有一个操作数是long，计算结果是long。</li><li>如果有一个操作数是float，计算结果是float。</li><li>如果有一个操作数是double，计算结果是double。</li></ul><p><strong>注：</strong> 以上规则当存在多个数据类型根据将转换成等级最高的数据类型。</p><h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><p>将范围大的数据转换为小数据时，可以使用强制类型转换，这种转换可能会导致溢出或者精度下降。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">123</span>;<br>    <span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> (<span class="hljs-type">byte</span>)i;<span class="hljs-comment">//强制类型转换为byte</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="隐式强制类型转换"><a href="#隐式强制类型转换" class="headerlink" title="隐式强制类型转换"></a>隐式强制类型转换</h3><ul><li>整数的默认类型是int。</li><li>浮点型默认是double，在定义float类型必须在数字后面跟上F或者f。</li></ul><h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><p>引用数据类型：类，接口，数组都是引用数据类型。</p><p>引用类型的特点：</p><ul><li>引用类型作为类首先继承Object，拥有了Object类的方法。</li><li>引用类型的变量可以存储null值。</li></ul><p>Java中的基本数据类型都有对应的包装类。</p><table><thead><tr><th>基本数据类型</th><th>包装类</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>boolean</td><td>Boolean</td></tr></tbody></table><p>Java为包装类做了一些特殊功能：</p><ul><li><p>可以把基本数据类型的转换成字符串类型的值</p><ol><li>调用对应<strong>包装类实体</strong>.toString()方法，如<code>Integer i = 1;String s = i.toString();</code></li><li>调用对应的<strong>包装类型</strong>.toString(基本数据类型的值)，如<code>String s = Integer.toString(1);</code></li><li>直接把基本数据类型拼接字符串，如<code>int i = 0; String s = i+&quot;&quot;;</code></li></ol></li><li><p>可以把字符串类型的数值转换成对应的基本数据类型的值</p><ol><li><strong>包装类型</strong>.parse<strong>对应类型</strong>(“字符串的值”)，如<code>Integer.parseInt(&quot;1&quot;);</code></li><li><strong>包装类型</strong>.valueOf(“字符串的值”)，如<code>Integer.valueOf(&quot;1&quot;);</code></li></ol></li></ul><h3 id="类型对比"><a href="#类型对比" class="headerlink" title="类型对比"></a>类型对比</h3><ul><li><p>有了基本数据类型，为为什么还要包装类型？</p><blockquote><p>引用类型封装了数据和处理该数据的方法</p><p>Java中大部分类和方法都是针对引用数据类型，包括泛型和集合。</p><p>基本类型有默认值，无法表示空null。</p></blockquote></li><li><p>引用类型包括了基本类型的功能，为什么还用基本类型？</p><blockquote><p>引用类型的对象要多存储对象头，对基本类型来说空间浪费率太高。逻辑上讲，Java只要包装类就够了，但是为了运行速度，需要用到基本数据类型；优先考虑运行效率问题，所以二者同时存在是合乎情理的。</p></blockquote></li><li><p>&#x3D;&#x3D;</p><blockquote><p>基本类型：比较的是具体的值</p><p>引用类型：比较的是对象的地址</p></blockquote></li></ul><h3 id="自动装箱与拆箱"><a href="#自动装箱与拆箱" class="headerlink" title="自动装箱与拆箱"></a>自动装箱与拆箱</h3><blockquote><p>Java是一门面向对象的编程语言，所以除了8大基础类型之外一切皆为对象，但为了方便面向对象开发，基础类型也有对应的包装类。但包装类和基础类型在赋值或比较时要进行类型转换，使用起来不够丝滑，感觉他们之间有很大的鸿沟。所以jdk1.5之后就推出了自动装箱和自动拆箱机制，使卡覅更加方便，代码更加简洁。</p><p>自动装箱就是在编译时自动将基础类型转换与之对应的包装类，而拆箱刚好与之相反，就是在编译时自动将包装类转换为与之对应的基础类型。</p></blockquote><p>自动装箱拆箱要点：</p><ul><li>自动装箱时编译器调用<code>valueOf</code>将基本类型转换成对象，同时自动拆箱时，编译器通过调用类似<code>intValue()</code> 、<code>doubleValue()</code>等这类的方法将对象转换成基本类型。</li></ul><h4 id="何时自动装箱和拆箱"><a href="#何时自动装箱和拆箱" class="headerlink" title="何时自动装箱和拆箱"></a>何时自动装箱和拆箱</h4><p>自动装箱和拆箱在Java中很常见，比如有一个方法，接受一个对象类型的参数，如果我们传入一个基本类型，那么Java会自动将这个基本类型的值转换成与之对应的包装类型。</p><p>以下两种情况会发生自动装箱</p><ul><li>基本类型作为参数传递给相应的包装类型方法</li><li>基本类型分配到对应的包装类型变量</li></ul><p>以下四种情况会发生自动拆箱：</p><ul><li>包装类型作为参数传递给基本类型的方法</li><li>包装类型分配到基本类型的变量</li><li>在进行+,-时也会发生自动拆箱，因为Integer或者其他包装类型对象无法使用运算符。</li><li>在使用三目运算符的情况下，可能会发生自动拆箱。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>list.add(<span class="hljs-number">1</span>);<span class="hljs-comment">//自动装箱</span><br>list.add(<span class="hljs-number">2</span>);<span class="hljs-comment">//自动装箱</span><br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> list.get(<span class="hljs-number">0</span>);<span class="hljs-comment">//自动拆箱</span><br></code></pre></td></tr></table></figure><h4 id="自动装箱和自动拆箱的优缺点"><a href="#自动装箱和自动拆箱的优缺点" class="headerlink" title="自动装箱和自动拆箱的优缺点"></a>自动装箱和自动拆箱的优缺点</h4><p><strong>优点:</strong></p><ul><li>自动拆箱和自动装箱的引入方便了我们编写程序，提高编程效率</li></ul><p><strong>缺点:</strong></p><ul><li>由于包装类型是对象，可能存在空指针异常</li><li>自动拆箱会消耗性能，在性能敏感且操作数量大的情况下，性能会明显下降</li></ul><p><strong>所以建议要避免无意义的拆箱、装箱。</strong></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一篇博客</title>
    <link href="/2022/09/10/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/09/10/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="第一篇博客"><a href="#第一篇博客" class="headerlink" title="第一篇博客"></a>第一篇博客</h1><p>欢迎来到Lyice’s的博客</p><h2 id="写在最前面"><a href="#写在最前面" class="headerlink" title="写在最前面"></a>写在最前面</h2><p>本人从2017年底开始实习到现在已经工作好几年了，但是发现自己主要是在写一些偏业务上的代码。期间也跟着视频或者文章学过一些新的技术栈，但是一般都是跟着视频实践，没有真正应用到项目中。加上看过之后长时间用不到，感觉学了没多久就忘记了。所以一直想写一个博客记录下来，但是基于各种原因一直拖延到现在。加上之前想着多写几篇一起发，但是电脑坏了重装系统后写的文章都没了，所以改变了一下思路，想着每写一个文章就发一篇。</p><p>同时写博客也是达到一个自我驱动的目的，本人平时就是间接性踌躇满志，持续性混吃等死的状态。所以也希望通过写博客能让自己坚持持续的学习。</p><p>最后我并未将此地址告知任何人，也暂时不打算这么做。</p><h2 id="当下情况"><a href="#当下情况" class="headerlink" title="当下情况"></a>当下情况</h2><p>目前的技术足够应付日常的开发情况，但是想要更进一步写出简单易懂、效率高、拓展性好的代码还是比较吃力。加上国内的就业形势，为了以后不被优化，计划利用每周空闲时间来给自己充电学习。持续的提高自己的不可替代性。</p><h2 id="近期计划"><a href="#近期计划" class="headerlink" title="近期计划"></a>近期计划</h2><ul><li>从java基础开始梳理一下，然后通过博客记录下来</li><li>梳理完java基础之后重点看下java并发</li><li>在不加班的情况下保持周更博客</li></ul><h2 id="未来方向"><a href="#未来方向" class="headerlink" title="未来方向"></a>未来方向</h2><p>争取通过自己的努力进一个自研、不加班的公司。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><blockquote><p> <strong>种一棵树最好的时间是十年前，其次是现在</strong></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/09/08/hello-world/"/>
    <url>/2022/09/08/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
