<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Spring Framework</title>
    <link href="/2022/11/01/Spring%20Framework/"/>
    <url>/2022/11/01/Spring%20Framework/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-Framework"><a href="#Spring-Framework" class="headerlink" title="Spring Framework"></a>Spring Framework</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Spring Framework通常我们称它为Spring框架。</p><p>Spring框架是一个分层的、面向切面的<code>Java</code>应用程序的一站式轻量级解决方案，它是Spring技术栈的核心和基础，是为了解决企业级应用开发的复杂性而创建的。</p><p>Spring框架由Rod Johnson开发，2004年发布了Spring框架的第一版。Spring是一个从实际开发抽取出来的框架，因此它完成了大量开发中的通用步骤，留给开发者的仅仅是与特定应用相关的部分，从而大大提高了企业应用的开发效率。</p><p>Spring总结起来优点如下：</p><ul><li>低侵入设计，代码的污染极低。</li><li>独立于各种应用服务器，基于Spring框架的应用，可以真正实现Wirte Once，Run Anywhere的承诺。</li><li>Spring的IoC容器降低了业务对象替换的复杂性，提高了组件之间的解耦。</li><li>Spring的AOP支持将一些通用任务如安全、事务、日志等进行集中式管理，从而提供更好的复用。</li><li>Spring的ORM和DAO提供了与第三方持久层框架的良好整合，并简化了底层的数据库访问。</li><li>Spring的高度开放性，并不强制应用完成依赖于Spring，开发者可以自由选择用Spring框架的部分或者全部。</li></ul><p>Spring框架的组成结构图如下所示：</p><p>![spring-overview](img&#x2F;Spring Framework.assets&#x2F;673670c9a34075831373b711cb8f21b7.png)</p><p>参考：<a href="https://www.runoob.com/w3cnote/basic-knowledge-summary-of-spring.html">Spring基础知识汇总 Java开发必看 | 菜鸟教程 (runoob.com)</a></p><h2 id="IoC"><a href="#IoC" class="headerlink" title="IoC"></a>IoC</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>IoC全称为Inversion of Control，也叫“控制反转”，它不是一门技术，而是一种设计思想。</p><p>Spring通过IoC容器来管理所有<code>Java</code>对象的实例化和初始化，控制对象与对象之间的依赖关系。我们将由IoC容器管理的<code>Java</code>对象称为Spring Bean，它与使用关键字<code>new</code>创建的<code>Java</code>对象没有任何区别。</p><p>IoC容器是Spring框架中最重要的核心组件之一，它贯穿了Spring从诞生到成长的整个过程。</p><h3 id="IoC容器介绍"><a href="#IoC容器介绍" class="headerlink" title="IoC容器介绍"></a>IoC容器介绍</h3><p>Spring 通过一个配置文件描述Bean及Bean之间的依赖关系，利用<code>Java</code>语言的反射功能实现实例化Bean并建立Bean之间的依赖关系。Spring的IoC容器在完成这些底层工作的基础上，还提供了Bean实例缓存、生命周期管理、Bean实例代理、时间发布、资源装载等高级服务。</p><p>Spring提供了IoC容器实现的两种方式（两个接口）：</p><ol><li>BeanFactory：IoC容器基本实现，是Spring内部的使用接口，面向Spring本身</li><li>ApplicationContext：BeanFactory接口的子接口，提供更多更强大的功能，面向使用Spring框架的开发者，几乎所有的应用场合我们都直接使用ApplicationContext而非底层的BeanFactory</li></ol><h4 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h4><p>BeanFactory是Spring IoC中最核心的接口，它承担IoC最基本的职责，即创建并管理各种类的对象。BeanFactory接口的关键方法getBean的实现中，会试图从缓存中查找并返回对应的Bean。若不存在，则根据Bean对应的bean definition来创建bean对象（包括实例化、属性赋值、依赖装配、初始化等工作），因此得名Bean工厂。</p><p>容器启动时，BeanFactory会从配置元信息中加载beanDefinition，之后Bean的创建和管理都依赖于beanDefinition。</p><h4 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h4><p>ApplicationContext容器是BeanFactory的子接口，也被称为spring上下文。</p><p>ApplicationContext 是Spring中较高级的容器。和BeanFactory类似，它可以加载配置文件中定义的bean，将所有的bean集中在一起，当有请求的时候分配 bean。 另外，它增加了企业所需要的功能，比如，从属性文件中解析文本信息和将事件传递给所指定的监听器。这个容器在 org.springframework.context.ApplicationContext interface 接口中定义。</p><p>在BeanFactory中，很多功能需要以编程的方式实现，而在ApplicationContext中则可以通过配置的方式实现。</p><h4 id="容器总结"><a href="#容器总结" class="headerlink" title="容器总结"></a>容器总结</h4><ul><li>BeanFactory是IoC容器的顶层接口，初始化BeanFactoyr对象时，加载的bean延迟加载</li><li>ApplicationContext接口是Spring容器的核心接口，初始化时bean立即加载</li><li>ApplicationContexti接口提供基础的bean操作相关方法，通过其他接口拓展其功能</li><li>ApplicationContext接口常用初始化类<ul><li>ClassPathXmlApplicationContext：该容器从XML文件中加载被定义的bean。默认加载项目的CLASSPATH路径下的配置文件。</li><li>FileSystemXmlApplicationContext：该容器从XML文件中加载被定义的bean。需要提供给构造XML文件的完整路径。</li><li>WebXmlApplicationContext：该容器会在一个web应用程序的范围内加载在XML文件中被定义的bean。</li></ul></li></ul><h3 id="Spring-Bean"><a href="#Spring-Bean" class="headerlink" title="Spring Bean"></a>Spring Bean</h3><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><p>Spring bean是Spring框架在运行时管理的对象。Spring bean是任何Spring应用程序的基础。</p><p>在XML配置的<code>&lt;bean&gt;</code>标签中可以包含多个属性或子元素，常用的属性或子元素如下：</p><table><thead><tr><th>属性名称</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>bean的唯一标识，IoC容器对bean的配置和管理通过该属性完成。</td></tr><tr><td>name</td><td>bean的名称，可以通过name属性为一个bean指定多个名称，每个名称之间用逗号、分号或空格隔开，IoC容器也可以通过name属性配置和管理容器中的bean</td></tr><tr><td>class</td><td>这个属性是必须的，用来指定bean的具体实现类，它必须是一个完整的类名，即类的全限定名。</td></tr><tr><td>autowire</td><td>自动装配模式</td></tr><tr><td>scope</td><td>表示bean的作用域，默认为singleton。</td></tr><tr><td>constructor-arg</td><td><code>&lt;bean&gt;</code>标签的子标签，可以通过该属性将构造参数传入以实现bean的实例化。</td></tr><tr><td>property</td><td><code>&lt;bean&gt;</code>标签的子标签，用于调用bean实例的<code>setter</code>方法对属性进行赋值，聪儿完成属性的注入。该元素的name属性用于指定bean实例中相应的属性名。</td></tr><tr><td>ref</td><td><code>&lt;constructor&gt;</code>和<code>&lt;property&gt;</code>等标签的子标签，用于指定bean实例的引用，即<code>&lt;bean&gt;</code>标签中的id或name属性。</td></tr><tr><td>value</td><td><code>&lt;constructor&gt;</code>和<code>&lt;property&gt;</code>等标签的子标签，用于指定一个常量值。</td></tr><tr><td>list</td><td>用于bean实例的List或数组类型的属性注入。</td></tr><tr><td>set</td><td>用于bean实例的Set类型的属性注入。</td></tr><tr><td>map</td><td>用于bean实例的Map类型的属性注入。</td></tr><tr><td>entry</td><td><code>&lt;map&gt;</code>标签的子标签，用于设置一个键值对。其中key属性指定map的key，ref或value指定其值。</td></tr><tr><td>init-method</td><td>容器初始化bean时调用该方法</td></tr><tr><td>destroy-method</td><td>容器删除bean时调用该方法，该方法只在作用域为singleton时有效</td></tr><tr><td>lazy-init</td><td>懒加载，为true时容器在首次请求时才会创建bean实例；false时容器启动时创建bean实例。该方法只在作用域为singleton时有效</td></tr></tbody></table><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.StudentFactory&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;factory&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;student&quot;</span> </span><br><span class="hljs-tag">      <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;student student2&quot;</span> //<span class="hljs-attr">多个可以用空格</span>、<span class="hljs-attr">逗号或</span>；</span><br><span class="hljs-tag">      <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.Student&quot;</span> //<span class="hljs-attr">bean的具体实现</span></span><br><span class="hljs-tag">      <span class="hljs-attr">lazy-init</span>=<span class="hljs-string">&quot;true&quot;</span>  //<span class="hljs-attr">懒加载</span></span><br><span class="hljs-tag">      <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;init&quot;</span>  //<span class="hljs-attr">初始时调用的方法</span></span><br><span class="hljs-tag">      <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;destroy&quot;</span> //<span class="hljs-attr">bean销毁时调用的方法</span></span><br><span class="hljs-tag">      <span class="hljs-attr">factory-bean</span>=<span class="hljs-string">&quot;factory&quot;</span> //<span class="hljs-attr">实例工厂</span>，<span class="hljs-attr">需要提前加载到IoC容器中</span></span><br><span class="hljs-tag">      <span class="hljs-attr">factory-method</span>=<span class="hljs-string">&quot;getInstance&quot;</span> //<span class="hljs-attr">bean工厂方法</span></span><br><span class="hljs-tag">      <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;singleton&quot;</span>  //<span class="hljs-attr">作用域</span></span><br><span class="hljs-tag">      &gt;</span><br>    //name代表bean的属性名，ref表示IoC容器加载bean的name或id<br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dao&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;studentDao dao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.StudentDao&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h4 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h4><p>自动装配，它们可以用于指示Spring容器未来使用自动装配进行依赖注入。Spring提供了五种自动装配规则，它们分别对应autowire的5个值：</p><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>no</td><td>默认值，表示不使用自动装配，bean的依赖关系必须通过<code>&lt;constructor-agrg&gt;</code>和<code>&lt;property&gt;</code>标签的ref属性来定义。</td></tr><tr><td>byName</td><td>按名称自动装配：Spring会根据Java类中对象属性的名称在IoC容器中查找，若某个bean的id或name属性值与属性值的名称相同，则获取这个bean并与当前的Java类的bean建立关联关系。</td></tr><tr><td>byType</td><td>按类型自动装配：Spring会根据Java类中对象属性的类型在IoC容器中查找，若某个bean的class属性值与这个对象属性的类型相匹配，则获取这个bean并与当前的Java类的bean建立关联关系。</td></tr><tr><td>default</td><td>表示默认采用上一级标签<code>&lt;beans&gt;</code>设置的自动装配规则(default-autowire)进行装配。</td></tr><tr><td>constructor</td><td>与byType类似，不同之处在于它应用于构造器参数，如果容器中没有找到与构造器参数类型一致的bean则抛出异常。</td></tr></tbody></table><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><p>当通过Spring容器创建一个bean实例时，不仅可以完成bean实例的实例化，还可以为bean指定特定的作用域。Spring支持如下五种作用域：</p><ol><li>singleton：单例模式，在IoC容器中，singleton作用域的bean只会生成一个实例。</li><li>prototype：每次通过容器的<code>getBean()</code>方法获取prototype作用域的bean，都会产生一个新的bean实例。</li><li>request：对于一次http请求，request作用域的bean只生成一个实例。只有在Web应用中使用Spring时，该作用域才生效。</li><li>session：该作用域将bean的定义限制为http会话，只在Web应用的上下文中有效。</li><li>global session：每个全局的http session对应一个bean实例。同样只在Web应用中有效。</li></ol><p><strong>如果不指定bean的作用域，Spring默认使用singleton作用域。prototype作用域的bean的创建、销毁代价比较大；而singleton作用域的bean实例一旦创建就可以重复使用。因此应尽量避免将bean设置成prototype作用域。</strong></p><p><strong>剩下的作用域只能基于Web的ApplicationContext实现中（例如XmlWebApplicationContext）才能使用，否则就会抛出一个IllegalStateException的异常。</strong></p><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p>对于普通的<code>Java</code>对象，当<code>new</code>的时候创建对象，然后该对象就可以使用了。一旦该对象不再被使用，则由<code>Java</code>垃圾回收器进行回收。</p><p>而Spring中的对象是bean，bean和普通的<code>Java</code>对象没有什么大的区别，只不过Spring不需要再自己去<code>new</code>对象了，而是由IoC容器去帮助我们实例化对象并且管理它，我们需要哪个对象，去找IoC容器即可。IoC其实就是解决对象之间的耦合问题，bean的生命周期完全由容器控制。</p><p>详细的流程如下：</p><p>![bean生命周期](img&#x2F;Spring Framework.assets&#x2F;image-20221116210721982.png)</p><p>单实例bean的全生命周期具体包含一下部分：</p><ol><li>BeanDefinition部分<ul><li>BeanDefinition的解析</li><li>BeanDefinition的注册</li></ul></li><li>bean实例部分<ol><li>bean的实例化：实例化一个bean</li><li>bean的属性赋值：为bean设置相关属性和依赖</li><li>bean的初始化： 执行bean相对应的初始化方法</li><li>bean的使用：当bean初始化之后才能被用户使用</li><li>bean的销毁：执行bean相对应的销毁方法</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//源码位于 AbstractAutowireCapableBeanFactory.java</span><br><span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">doCreateBean</span><span class="hljs-params">(String beanName, RootBeanDefinition mbd, <span class="hljs-meta">@Nullable</span> Object[] args)</span> <span class="hljs-keyword">throws</span> BeanCreationException &#123;<br>    <span class="hljs-type">BeanWrapper</span> <span class="hljs-variable">instanceWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (mbd.isSingleton()) &#123;<br>        instanceWrapper = (BeanWrapper)<span class="hljs-built_in">this</span>.factoryBeanInstanceCache.remove(beanName);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (instanceWrapper == <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-comment">// 实例化阶段</span><br>        instanceWrapper = <span class="hljs-built_in">this</span>.createBeanInstance(beanName, mbd, args);<br>    &#125;<br><br>    ...<br><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">exposedObject</span> <span class="hljs-operator">=</span> bean;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// 属性赋值阶段</span><br>        <span class="hljs-built_in">this</span>.populateBean(beanName, mbd, instanceWrapper);<br>        <span class="hljs-comment">// 初始化阶段</span><br>        exposedObject = <span class="hljs-built_in">this</span>.initializeBean(beanName, exposedObject, mbd);<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable var18) &#123;<br>        ...<br>    &#125;<br><br>    ...<br>        <br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//销毁-注册回调接口</span><br>         <span class="hljs-built_in">this</span>.registerDisposableBeanIfNecessary(beanName, bean, mbd);<br>         <span class="hljs-keyword">return</span> exposedObject;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面为bean的主要生命周期，Spring为了方便扩展预留了许多钩子函数。当我们需要对bean进行修改时，只需要实现对应的接口，覆盖相对应的方法即可，当调用<code>initializeBean</code>时会对这些接口进行判断：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//源码位于 AbstractAutowireCapableBeanFactory.java</span><br><span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">initializeBean</span><span class="hljs-params">(String beanName, Object bean, <span class="hljs-meta">@Nullable</span> RootBeanDefinition mbd)</span> &#123;<br>    <span class="hljs-comment">//回调Aware接口的方法（BeanNameAware,BeanClassLoaderAware,BeanFactoryAware）</span><br>    <span class="hljs-keyword">if</span> (System.getSecurityManager() != <span class="hljs-literal">null</span>) &#123;<br>        AccessController.doPrivileged(() -&gt; &#123;<br>            <span class="hljs-built_in">this</span>.invokeAwareMethods(beanName, bean);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;, <span class="hljs-built_in">this</span>.getAccessControlContext());<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">this</span>.invokeAwareMethods(beanName, bean);<br>    &#125;<br>    <br>    <span class="hljs-comment">//BeanPostProceesor前置处理</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">wrappedBean</span> <span class="hljs-operator">=</span> bean;<br>    <span class="hljs-keyword">if</span> (mbd == <span class="hljs-literal">null</span> || !mbd.isSynthetic()) &#123;<br>        wrappedBean = <span class="hljs-built_in">this</span>.applyBeanPostProcessorsBeforeInitialization(bean, beanName);<br>    &#125;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//bean的初始化方法（init-method、afterPropertiesSet）</span><br>        <span class="hljs-built_in">this</span>.invokeInitMethods(beanName, wrappedBean, mbd);<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable var6) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanCreationException</span>(mbd != <span class="hljs-literal">null</span> ? mbd.getResourceDescription() : <span class="hljs-literal">null</span>, beanName, <span class="hljs-string">&quot;Invocation of init method failed&quot;</span>, var6);<br>    &#125;<br><span class="hljs-comment">//BeanPostProceesor后置处理</span><br>    <span class="hljs-keyword">if</span> (mbd == <span class="hljs-literal">null</span> || !mbd.isSynthetic()) &#123;<br>        wrappedBean = <span class="hljs-built_in">this</span>.applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> wrappedBean;<br>&#125;<br></code></pre></td></tr></table></figure><p>![bean的部分](img&#x2F;Spring Framework.assets&#x2F;20210710134349143.png)</p><p>参考：<a href="https://blog.csdn.net/riemann_/article/details/118500805">一文读懂 Spring Bean 的生命周期_老周聊架构的博客-CSDN博客_springbean生命周期详解</a></p><h3 id="Spring循环依赖"><a href="#Spring循环依赖" class="headerlink" title="Spring循环依赖"></a>Spring循环依赖</h3><h4 id="什么是循环依赖？"><a href="#什么是循环依赖？" class="headerlink" title="什么是循环依赖？"></a>什么是循环依赖？</h4><p>循环依赖其实就是循环引用，也就是两个或两个以上的bean互相引用对方，最终形成闭环。</p><p>![循环依赖](img&#x2F;Spring Framework.assets&#x2F;image-20221124205701883.png)</p><p>代码中的表现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Componet</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> B b;<br>&#125;<br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>&#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> A a;<br>&#125;<br></code></pre></td></tr></table></figure><p>Spring的循环依赖过程，跟bean的声明周期密切相关，在实例化bean的时候，会完成依赖注入。所以就会出现<code>实例化A</code>-&gt;<code>属性填充注入B</code>-&gt;<code>B没有实例化，需要先实例化B</code>-&gt;<code>实例化B</code>-&gt;<code>属性填充注入A</code>-&gt;<code>A实例化未完成，无法注入</code>-&gt;<code>实例化B失败</code>-&gt;<code>实例化A失败</code>。 </p><h4 id="Spring解决循环依赖的方式"><a href="#Spring解决循环依赖的方式" class="headerlink" title="Spring解决循环依赖的方式"></a>Spring解决循环依赖的方式</h4><p>Spring是通过三级缓存来解决循环依赖的，提前暴露的对象存放在三级缓存中，二级缓存存放过度bean，一级缓存存放最终形成的bean。</p><p>![三级缓存](img&#x2F;Spring Framework.assets&#x2F;下载.png)</p><p><code>ObjectFactory</code>是一个函数式接口：</p><p>在<code>java</code>中，方法在调用的时候都是具体的值，当使用函数式接口作为方法的参数类型时，可以将一个lambda表达式作为参数传递到方法中，lambda表达式在方法执行的时候并不会立刻调用，只有在调用<code>getObject</code>方法的时候才会完成此表达式的调用。</p><p>![三级缓存过程](img&#x2F;Spring Framework.assets&#x2F;image-20221124210201570.png)</p><p>为什么必须要使用三级缓存来解决循环依赖问题？三级缓存是如何解决循环依赖问题的？</p><ol><li><p>创建代理对象的时候是否需要创建原始对象？<br>需要，因为bean的生命周期是固定的，每次在对象创建的时候必须要先创建出原始对象</p></li><li><p>同一个容器中能同时存在同名的不同对象吗？<br>不能</p></li><li><p>如果同时存在了原始对象和代理对象，怎么办?<br>当对外暴露的时候应该使用代理对象，覆盖原始对象</p></li><li><p>为什么加了一个三级缓存就可以解决这个问题？<br>在整个bean的生命周期中，bean对象的属性赋值（populateBean）在前执行，而bean动态代理对象（BeanPostProcessor的后置处理方法）的创建在后执行，</p></li></ol><p><strong>按照正常的流程，先进行对象属性的赋值，而对象属性的赋值过程引用的都是原始对象，当赋值完成之后才会进行代理对象的创建，那么此时引用的对象必然不是最终版本的bean对象</strong></p><ol start="5"><li><p>如果想解决这个问题的话，怎么办？<br>需要将代理对象的创建过程前置，也就是说在进行对象的属性赋值的时候，在设置具体的值之前，必须要唯一性的确定出到底是代理对象还是原始对象</p></li><li><p>为什么要用lambda表达式呢？<br>因为在方法调用的时候lambda表达式并不会立刻执行，在设置值具体确定的前一个步骤，回调即可，就可以唯一性的确定好是用代理对象还是原始对象了</p></li></ol><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p>AOP 面向切片编程： AOP（Aspect-Oriented Programming，面向切面编程）能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任(例如事务处理、日志管理、权限控制等)封装起来，便于减少系统的重复代码，降低模块之间的耦合度，利于以后项目的拓展与维护。</p><p>使用AOP我们可以把一些通用功能抽取出来，在需要调用的地方直接调用即可，这样大大简化了代码量，提高了系统的扩展性。 </p><h3 id="AOP的基本概念"><a href="#AOP的基本概念" class="headerlink" title="AOP的基本概念"></a>AOP的基本概念</h3><p>关于面向切面编程的一些术语：</p><table><thead><tr><th>术语</th><th>描述</th></tr></thead><tbody><tr><td>切面（Aspect）</td><td>切面是通知和切点的结合</td></tr><tr><td>连接点（Joint Point）</td><td>连接点表示应用执行过程中能够插入切面的一个点</td></tr><tr><td>通知（Advice）</td><td>AOP中的增强处理，通知描述了切面何时执行以及如何执行增强处理</td></tr><tr><td>切入点（Pointcut）</td><td>可以插入增强处理的连接点</td></tr></tbody></table><p>通知（Advice）的类型：</p><table><thead><tr><th>通知类型</th><th>描述</th></tr></thead><tbody><tr><td>before</td><td>在目标方法执行之前运行（前置通知）</td></tr><tr><td>after</td><td>在目标方法执行之后执行（后置通知）</td></tr><tr><td>after-returnning</td><td>目标方法正常返回时执行（正常返回通知）</td></tr><tr><td>after-throwing</td><td>目标方法抛出异常时执行（异常返回通知）</td></tr><tr><td>around</td><td>在目标方法执行之前和之后执行（环绕通知）</td></tr></tbody></table><h3 id="AOP的实现原理"><a href="#AOP的实现原理" class="headerlink" title="AOP的实现原理"></a>AOP的实现原理</h3><p>AOP实现可以分为两类：</p><ol><li>静态AOP实现：AOP框架在编译阶段对程序进行修改，即实现对目标类的增强，生成静态的AOP代理类，以AspectJ为代表。</li><li>动态AOP实现：AOP框架在运行阶段生成AOP代理，以实现对目标对象的增强，以Spring AOP为代表。</li></ol><p>一般来说，静态AOP实现具有较好的性能，但是需要特殊的编译器。动态AOP实现是纯Java实现，因此无需特殊的编译器，但是通常性能略差。</p><h4 id="AspectJ-AOP"><a href="#AspectJ-AOP" class="headerlink" title="AspectJ AOP"></a>AspectJ AOP</h4><p>AspectJ是一个基于Java语言的全功能的AOP框架，它并不是Spring的组成部分，是一款独立的AOP框架。</p><p>但犹豫AspectJ支持通过Spring配置AspectJ切面，因此它是Spring AOP的完美补充，通常情况下，我们都是将AspectJ和Spring框架一起使用，简化AOP操作。</p><p>使用AspectJ需要在Spring项目中导入Spring AOP和AspectJ相关的jar包：</p><ul><li>spring-aop-xxx.jar</li><li>spring-aspects-xxx.jar</li><li>aspectjweaver-xxxx.jar</li></ul><p>以上三个jar包中，前两个spring开头的都是Spring框架提供的jar包，而最后一个则是AspectJ提供的。</p><h4 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a>Spring AOP</h4><p>Spring AOP是基于动态代理的，如果要代理的对象实现了某个接口，那么Spring AOP就会使用jdk动态代理去创建代理对象；而对于没有实现接口的对象，就无法使用JDK动态代理，转而使用CGLIB动态代理生成一个被代理对象的子类作为代理。</p><p>Spring AOP用到的两种动态代理技术：JDK自带的动态代理和、CGLIB库</p><ul><li>JDK动态代理只能对实现了接口的类生成代理</li><li>CGLIB是针对类实现代理，生成指定类的一个子类，覆盖其中的方法</li></ul><p><strong>Spring AOP和AspectJ AOP的区别：</strong> Spring AOP是属于运行时增强，AspectJ AOP是编译时增强。 Spring AOP是基于代理， AspectJ AOP是基于字节码操作。 AspectJ AOP相比于Spring AOP更强大，Spring AOP相对来说更简单。如果切面比较少，两者性能差异不大。否则最好选择AspectJ 它比Spring AOP快很多。</p><h2 id="Spring事务相关"><a href="#Spring事务相关" class="headerlink" title="Spring事务相关"></a>Spring事务相关</h2><p>统一一致的事务抽象是Spring框架的一大优势，无论是全局事务还是本地事务，JTA、JDBC、JPA等，Spring都使用统一的编程模型，使得应用程序很容易地在全局事务与本地事务，或者不同事务框架之间进行切换。</p><p>Spring支持两种事务管理方式：</p><ol><li>编程式事务：通过<code>TransactionTemplate</code>或者<code>TransactionManager</code>手动管理事务，控制回滚或者提交。</li><li>声明式事务：通过<code>@Transactional</code>注解声明事务，不需要额外的代码。<strong>Spring推荐的方式，非侵入式开发。</strong></li></ol><h3 id="Spring事务属性"><a href="#Spring事务属性" class="headerlink" title="Spring事务属性"></a>Spring事务属性</h3><p>事务属性可以理解为事务的一些基本配置，描述了事务策略如何应用到方法上。事务属性包含了5个方面：</p><ol><li>传播行为</li><li>隔离规则</li><li>回滚规则</li><li>事务超时</li><li>是否只读</li></ol><p>Spring框架中，事务相关的核心接口如下：</p><ul><li><code>PlatformTransactionManager</code>：事务管理器，Spring事务策略的核心</li><li><code>TransactionDefinition</code>：事务属性定义</li><li><code>TransactionStatus</code>：事务运行状态</li></ul><p>下图是Spring事务抽象的核心类图：</p><p>![Spring事务类图](img&#x2F;Spring Framework.assets&#x2F;v2-ff9900cb40f07db75d1190628f464564_720w.webp)</p><p><code>PlatfromTransactionManager</code>接口定义了三个方法用来操作事务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">PlatformTransactionManager</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TransactionManager</span> &#123;<br>    <span class="hljs-comment">//获得事务</span><br>    TransactionStatus <span class="hljs-title function_">getTransaction</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> TransactionDefinition var1)</span> <span class="hljs-keyword">throws</span> TransactionException;<br><span class="hljs-comment">//提交事务</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">commit</span><span class="hljs-params">(TransactionStatus var1)</span> <span class="hljs-keyword">throws</span> TransactionException;<br><span class="hljs-comment">//回滚事务</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">rollback</span><span class="hljs-params">(TransactionStatus var1)</span> <span class="hljs-keyword">throws</span> TransactionException;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>TransactionDefinition</code>接口中定义了事务的各种信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">TransactionDefinition</span> &#123;<br>    <span class="hljs-comment">//事务传播行为</span><br>    <span class="hljs-comment">//如果当前没有事务，就新建一个事务，如果已经存在一个事务，则默认加入到这个事务中。 </span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">PROPAGATION_REQUIRED</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//支持当前事务，如果当前没有事务，就以非事务方式执行。</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">PROPAGATION_SUPPORTS</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//表示该方法必须在事务中运行，如果当前事务不存在，则会抛出一个异常。</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">PROPAGATION_MANDATORY</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-comment">//表示当前方法必须运行在自己的事务中，以一个新的事务执行。如果当前存在事务，当前事务会被挂起。</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">PROPAGATION_REQUIRES_NEW</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>    <span class="hljs-comment">//表示该方法不运行在事务中。如果当前存在事务，当前事务会被挂起。</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">PROPAGATION_NOT_SUPPORTED</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br>    <span class="hljs-comment">//表示当前方法从来不在事务中执行，如果当前存在事务，则会抛出异常。</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">PROPAGATION_NEVER</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>    <span class="hljs-comment">//如果存在当前事务，则嵌套事务内执行。如果当前没有事务，则进行与PROPAGATION_REQUIRED类似的操作。</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">PROPAGATION_NESTED</span> <span class="hljs-operator">=</span> <span class="hljs-number">6</span>;<br>    <br>    <span class="hljs-comment">//事务隔离级别</span><br>    <span class="hljs-comment">//使用后端数据库默认的隔离级别</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">ISOLATION_DEFAULT</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//允许读未提交的数据</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">ISOLATION_READ_UNCOMMITTED</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//允许读已经提交的数据</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">ISOLATION_READ_COMMITTED</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-comment">//允许读取并发事务已经提交的事务</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">ISOLATION_REPEATABLE_READ</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br>    <span class="hljs-comment">//最高的隔离级别，也是最慢的隔离级别。事务一个一个串行执行。</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">ISOLATION_SERIALIZABLE</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">TIMEOUT_DEFAULT</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">//返回事务的传播行为</span><br>    <span class="hljs-keyword">default</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getPropagationBehavior</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">//返回事务的隔离级别，事务管理器根据它来控制另外一个事务可以看到本事务内的哪些数据</span><br>    <span class="hljs-keyword">default</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getIsolationLevel</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><span class="hljs-comment">//返回事务的超时时间，如果超过该时间限制但事务还没有完成则自动回滚事务</span><br>    <span class="hljs-keyword">default</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getTimeout</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><span class="hljs-comment">//返回是否未只读事务</span><br>    <span class="hljs-keyword">default</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isReadOnly</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//事务名称</span><br>    <span class="hljs-meta">@Nullable</span><br>    <span class="hljs-keyword">default</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> TransactionDefinition <span class="hljs-title function_">withDefaults</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> StaticTransactionDefinition.INSTANCE;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>TransactionStatus</code>接口内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">TransactionStatus</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TransactionExecution</span>, SavepointManager, Flushable &#123;<br>    <span class="hljs-comment">//判断是否有回滚点</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasSavepoint</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">flush</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">TransactionExecution</span> &#123;<br>    <span class="hljs-comment">//是否是一个新的事务</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isNewTransaction</span><span class="hljs-params">()</span>;<br><span class="hljs-comment">//设置只能被回滚</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRollbackOnly</span><span class="hljs-params">()</span>;<br><span class="hljs-comment">//是否只能回滚</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isRollbackOnly</span><span class="hljs-params">()</span>;<br><span class="hljs-comment">//是否已完成</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isCompleted</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SavepointManager</span> &#123;<br>    <span class="hljs-comment">//创建回滚点</span><br>    Object <span class="hljs-title function_">createSavepoint</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> TransactionException;<br><span class="hljs-comment">//回滚到回滚点</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">rollbackToSavepoint</span><span class="hljs-params">(Object var1)</span> <span class="hljs-keyword">throws</span> TransactionException;<br><span class="hljs-comment">//释放回滚点</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">releaseSavepoint</span><span class="hljs-params">(Object var1)</span> <span class="hljs-keyword">throws</span> TransactionException;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="回滚规则"><a href="#回滚规则" class="headerlink" title="回滚规则"></a>回滚规则</h4><p>事务回滚规则定义了哪些异常会导致事务回滚；哪些不会。默认情况下，只有在运行时异常（RuntimeException）和错误（Error）会导致事务回滚。而在遇到检查异常（Checked）不会回滚。但是你可以声明事务在遇到哪些特定的检查型异常时回滚；同样你也可以声明事务遇到特定的异常不会滚，即使这些异常是运行期异常。</p><h4 id="事务超时"><a href="#事务超时" class="headerlink" title="事务超时"></a>事务超时</h4><p>为了应用程序很好的运行，事务不能运行太长时间。所谓事务超时，就是指一个事务所运行的最长时间，如果超过该时间限制但是事务还没有完成，则自动回滚事务。在<code>TransactionDefinition</code>中以<code>int</code>表示，其单位是秒，默认值为-1。</p><h4 id="是否只读"><a href="#是否只读" class="headerlink" title="是否只读"></a>是否只读</h4><p>如果一个事务中所有关于数据库的操作都是只读的，也就是说这些操作并不修改数据。这个时候我们应该给该事务设置只读属性，这样可以帮助数据库引擎优化事务，提升效率。</p><h3 id="Spring事务的两种实现方法"><a href="#Spring事务的两种实现方法" class="headerlink" title="Spring事务的两种实现方法"></a>Spring事务的两种实现方法</h3><h4 id="编程式事务"><a href="#编程式事务" class="headerlink" title="编程式事务"></a>编程式事务</h4><p>通过<code>TransactionTemplate</code>或者<code>TransactionManager</code>手动管理事务，控制事务提交或者回滚，实际应用中很少使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Resource</span><br>PlatformTransactionManager manager;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testTransactionManager</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">TransactionStatus</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> manager.getTransaction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultTransactionDefinition</span>());<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//处理业务</span><br>        <span class="hljs-comment">//...</span><br>        <span class="hljs-comment">//处理完成</span><br>        manager.commit(status);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        <span class="hljs-comment">//业务异常</span><br>        manager.rollback(status);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h4><p>底层建立在AOP的基础上，在方法执行前后进行拦截，并且在目标方法开始执行前创建新事务或加入一个已存在的事务，最后在目标方法执行后根据情况提交或回滚事务。声明事务优点代码侵入性最小，推荐使用。只需要在目标方法上添加<code>@Transactional</code>注解即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testTransaction</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//处理业务</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Transactional注解使用详情"><a href="#Transactional注解使用详情" class="headerlink" title="@Transactional注解使用详情"></a><code>@Transactional</code>注解使用详情</h4><h5 id="Transactional的作用范围"><a href="#Transactional的作用范围" class="headerlink" title="@Transactional的作用范围"></a><code>@Transactional</code>的作用范围</h5><ol><li>类：如果这个注解使用在类上的，类里所有的<code>public</code>方法都生效</li><li>接口：所有方法都生效，不推荐在接口上使用</li><li>方法：推荐将注解用于方法上，<strong>不过该注解只能应用到<code>public</code>的方法上，否则不生效</strong></li></ol><p><strong>为什么建议直接加在方法上：因为<code>@Transactional</code>如果直接加在类或者接口上，此注解会对当前类下所有<code>public</code>的方法都生效：第一影响性能，有些方法可能不需要事务，第二方法不同可能<code>@Transactional</code>所需要的配置也不同，比如有些查询的方法需要配置<code>readOnly</code>参数，没办法单独配置。所以强烈建议<code>@Transactional</code>加到方法上。</strong></p><h5 id="Transactional的常用配置参数"><a href="#Transactional的常用配置参数" class="headerlink" title="@Transactional的常用配置参数"></a><code>@Transactional</code>的常用配置参数</h5><p><code>@Transactional</code>注解里各个属性和上面的事务属性是一一对应的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Transactional &#123;<br>    <span class="hljs-comment">//当配置文件中有多个TransactionManager，可以用该属性指定选择哪个事务管理器</span><br>    <span class="hljs-meta">@AliasFor(&quot;transactionManager&quot;)</span><br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-comment">//同上</span><br>    <span class="hljs-meta">@AliasFor(&quot;value&quot;)</span><br>    String <span class="hljs-title function_">transactionManager</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-comment">//事务标签</span><br>    String[] label() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    <span class="hljs-comment">//事务的传播行为，默认值采用REQUIRED</span><br>    Propagation <span class="hljs-title function_">propagation</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> Propagation.REQUIRED;<br><br>    <span class="hljs-comment">//事务的隔离规则，默认采用DEFAULT</span><br>    Isolation <span class="hljs-title function_">isolation</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> Isolation.DEFAULT;<br><br>    <span class="hljs-comment">//事务超时时间</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">timeout</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> -<span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">//事务的超时时间</span><br>    String <span class="hljs-title function_">timeoutString</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-comment">//是否只读事务</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">readOnly</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-comment">//用于指定能够触发事务回滚的异常类型</span><br>    Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Throwable</span>&gt;[] rollbackFor() <span class="hljs-keyword">default</span> &#123;&#125;;<br>    <br><span class="hljs-comment">//用于指定能够触发事务回滚的类名</span><br>    String[] rollbackForClassName() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    <span class="hljs-comment">//用于指定不会触发事务回滚的异常类型</span><br>    Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Throwable</span>&gt;[] noRollbackFor() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    <span class="hljs-comment">//用于指定不会触发事务回滚的类名</span><br>    String[] noRollbackForClassName() <span class="hljs-keyword">default</span> &#123;&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="SPI机制"><a href="#SPI机制" class="headerlink" title="SPI机制"></a>SPI机制</h2><p>SPI全称Service Provider Interface，<strong>是一种组件发现和注册的方式，它可以用来启用框架扩展和替换组件。</strong></p><p><code>Java</code>提供一套用来被第三方实现或扩展的接口，<strong>SPI的作用就是为这些被扩展的API寻找服务实现</strong>。本质是通过<strong>基于接口的编程+策略模式+配置文件</strong>实现动态加载。可以实现<strong>解耦</strong>，提高框架的<strong>可扩展性</strong>。</p><p>很多框架都用了SPI机制，比如：Spring框架，JDBC、日志接口等。</p><h4 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h4><h5 id="定义接口"><a href="#定义接口" class="headerlink" title="定义接口"></a>定义接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DataBaseSPI</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">connection</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="相关实现"><a href="#相关实现" class="headerlink" title="相关实现"></a>相关实现</h5><p>mysql：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MysqlDataBase</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DataBaseSPI</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">connection</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;mysql database 已经链接。。。&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>oracle：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OracleDataBase</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DataBaseSPI</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">connection</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;oracle database 已经链接。。。&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在resource下的META-INF目录新增spring.factories文件</p><p>![image-20230308124750629](img&#x2F;Spring Framework.assets&#x2F;image-20230308124750629.png)</p><p>spring.factories文件内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs factories">org.example.DataBaseSPI = org.example.MysqlDataBase,org.example.OracleDataBase<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        List&lt;DataBaseSPI&gt; dataBaseSPIS = SpringFactoriesLoader.loadFactories(DataBaseSPI.class, Thread.currentThread().getContextClassLoader());<br>        <br>        <span class="hljs-keyword">for</span> (DataBaseSPI dataBaseSPI : dataBaseSPIS) &#123;<br>            dataBaseSPI.connection();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出内容：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">mysql <span class="hljs-keyword">database</span> 已经链接。。。<br>oracle <span class="hljs-keyword">database</span> 已经链接。。。<br></code></pre></td></tr></table></figure><h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="hljs-title function_">loadFactories</span><span class="hljs-params">(Class&lt;T&gt; factoryType, <span class="hljs-meta">@Nullable</span> ClassLoader classLoader)</span> &#123;<br>    Assert.notNull(factoryType, <span class="hljs-string">&quot;&#x27;factoryType&#x27; must not be null&quot;</span>);<br>    <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoaderToUse</span> <span class="hljs-operator">=</span> classLoader;<br>    <span class="hljs-keyword">if</span> (classLoader == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">//若没有传入类加载器，使用默认的类加载器</span><br>        classLoaderToUse = SpringFactoriesLoader.class.getClassLoader();<br>    &#125;<br><span class="hljs-comment">//获取指定工厂名称列表</span><br>    List&lt;String&gt; factoryImplementationNames = loadFactoryNames(factoryType, classLoaderToUse);<br>    <span class="hljs-comment">//如果记录器Trace跟踪激活，将工厂名称列表输出</span><br>    <span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>        logger.trace(<span class="hljs-string">&quot;Loaded [&quot;</span> + factoryType.getName() + <span class="hljs-string">&quot;] names: &quot;</span> + factoryImplementationNames);<br>    &#125;<br><span class="hljs-comment">//创建结果集</span><br>    List&lt;T&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>(factoryImplementationNames.size());<br>    <span class="hljs-type">Iterator</span> <span class="hljs-variable">var5</span> <span class="hljs-operator">=</span> factoryImplementationNames.iterator();<br><span class="hljs-comment">//实例化工厂类，并添加到结果集中</span><br>    <span class="hljs-keyword">while</span>(var5.hasNext()) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">factoryImplementationName</span> <span class="hljs-operator">=</span> (String)var5.next();<br>        result.add(instantiateFactory(factoryImplementationName, factoryType, classLoaderToUse));<br>    &#125;<br><span class="hljs-comment">//对结果集列表进行排序</span><br>    AnnotationAwareOrderComparator.sort(result);<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>大致工作流程如下：</p><ol><li>通过classLoader去加载工厂获取对应类名称，如果未指定类加载器，则使用默认的；</li><li>通过<code>instantiateFactory</code>方法实例化工厂类，并添加到结果集中；</li><li>对结果集进行排序，然后返回结果集</li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java集合之Map</title>
    <link href="/2022/10/07/Java%E9%9B%86%E5%90%88%E4%B9%8BMap/"/>
    <url>/2022/10/07/Java%E9%9B%86%E5%90%88%E4%B9%8BMap/</url>
    
    <content type="html"><![CDATA[<h1 id="Java集合之Map"><a href="#Java集合之Map" class="headerlink" title="Java集合之Map"></a>Java集合之Map</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>Map</code>集合是一种双列集合，每个元素包含<code>key-value</code>两个值。</p><p><code>Map</code>系列集合：</p><p><img src="/img/Java%E9%9B%86%E5%90%88%E4%B9%8BMap.assets/image-20221009202920387.png" alt="Map"></p><h2 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><blockquote><p><code>TreeMap</code>实现了<code>SortedMap</code>接口，是有序不可重复的键值对集合，基于红黑树实现，每个<code>key-value</code>都作为一个红黑树的节点，如果构造<code>TreeMap</code>没有指定比较器，则根据<code>key</code>的自然顺序进行排序，如果指定了比较器则根据比较器排序。</p></blockquote><h3 id="继承关系"><a href="#继承关系" class="headerlink" title="继承关系"></a>继承关系</h3><p><img src="/img/Java%E9%9B%86%E5%90%88%E4%B9%8BMap.assets/image-20221009210605928.png" alt="TreeMap"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeMap</span>&lt;K,V&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractMap</span>&lt;K,V&gt;<br>    <span class="hljs-keyword">implements</span> <span class="hljs-title class_">NavigableMap</span>&lt;K,V&gt;, Cloneable, java.io.Serializable<br></code></pre></td></tr></table></figure><ul><li><code>TreeMap</code>继承于<code>AbstractMap</code>，而<code>AbstractMap</code>实现了<code>Map</code>接口，并且实现了<code>NavigableMap</code>意味着拥有更强的元素搜索能力</li><li><code>SortedMap</code>接口定义了排序方法，表明对插入的元素排序</li></ul><h3 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The comparator used to maintain order in this tree map, or</span><br><span class="hljs-comment"> * null if it uses the natural ordering of its keys.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@serial</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//用于维护此集合中顺序的比较器，如果为空则使用键的自然顺序</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Comparator&lt;? <span class="hljs-built_in">super</span> K&gt; comparator;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> Entry&lt;K,V&gt; root;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The number of entries in the tree</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//存储的元素个数</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The number of structural modifications to the tree.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//对Map修改的次数</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-type">int</span> <span class="hljs-variable">modCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>Entry节点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Entry</span>&lt;K,V&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Map</span>.Entry&lt;K,V&gt; &#123;<br>    K key;<br>    V value;<br>    Entry&lt;K,V&gt; left;<span class="hljs-comment">//左子树</span><br>    Entry&lt;K,V&gt; right;<span class="hljs-comment">//右子树</span><br>    Entry&lt;K,V&gt; parent;<span class="hljs-comment">//父节点</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">color</span> <span class="hljs-operator">=</span> BLACK;<span class="hljs-comment">//当前节点颜色</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">TreeMap</span><span class="hljs-params">()</span> &#123;<br>    comparator = <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">TreeMap</span><span class="hljs-params">(Comparator&lt;? <span class="hljs-built_in">super</span> K&gt; comparator)</span> &#123;<br>    <span class="hljs-built_in">this</span>.comparator = comparator;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">TreeMap</span><span class="hljs-params">(Map&lt;? extends K, ? extends V&gt; m)</span> &#123;<br>    comparator = <span class="hljs-literal">null</span>;<br>    putAll(m);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">TreeMap</span><span class="hljs-params">(SortedMap&lt;K, ? extends V&gt; m)</span> &#123;<br>    comparator = m.comparator();<br>    <span class="hljs-keyword">try</span> &#123;<br>        buildFromSorted(m.size(), m.entrySet().iterator(), <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (java.io.IOException cannotHappen) &#123;<br>    &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException cannotHappen) &#123;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><p><code>HashMap</code>是一个散列表。主干是一个<code>Entry</code>数组，<code>Entry</code>是<code>HashMap</code>的基本组成单元，每一个<code>Entry</code>包含一个<code>key-value</code>键值对。</p><p><strong>因<code>JDK1.8</code>改动较大，<code>HashMap</code>分析主要以<code>JDK1.8</code>为主。</strong></p><h3 id="继承关系-1"><a href="#继承关系-1" class="headerlink" title="继承关系"></a>继承关系</h3><p><img src="/img/Java%E9%9B%86%E5%90%88%E4%B9%8BMap.assets/image-20221010101028204.png" alt="HashMap"></p><h3 id="成员属性"><a href="#成员属性" class="headerlink" title="成员属性"></a>成员属性</h3><h4 id="1-序列化版本号"><a href="#1-序列化版本号" class="headerlink" title="1. 序列化版本号"></a>1. 序列化版本号</h4>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">362498820763181265L</span>;<br></code></pre></td></tr></table></figure><h4 id="2-集合初始容量（必须是2的n次幂）"><a href="#2-集合初始容量（必须是2的n次幂）" class="headerlink" title="2. 集合初始容量（必须是2的n次幂）"></a>2. 集合初始容量（<strong>必须是2的n次幂</strong>）</h4>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//默认容量16，1&lt;&lt;4 等于1*2的4次方</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_INITIAL_CAPACITY</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">4</span>; <span class="hljs-comment">// aka 16</span><br></code></pre></td></tr></table></figure><ul><li><p>为什么必须是2的n次幂？</p><p><code>HashMap</code>在添加元素时，通过计算出<code>key</code>的<code>hash</code>值对数组的长度取余来确定下标位置。计算机中取余操作效率不如位运算效率高，**<code>hash % length == hash &amp; (length -1)</code>的前提是length是2的n次幂**</p></li><li><p>如果输入的值不是2的次幂会怎么样？</p><p>创建<code>HashMap</code>对象是，如果传入的初始容量（<code>initialCapacity</code>）不是2的次幂，底层会通过<code>tableSizeFor()</code>方法获取到大于那个数字并且最接近的2次幂数。</p><p>例：传入7会变成8， 9-&gt;16</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">tableSizeFor</span><span class="hljs-params">(<span class="hljs-type">int</span> cap)</span> &#123;  <span class="hljs-comment">//cap = 7</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> cap - <span class="hljs-number">1</span>;  <span class="hljs-comment">// n=6</span><br>    n |= n &gt;&gt;&gt; <span class="hljs-number">1</span>; <span class="hljs-comment">// 0110&gt;&gt;&gt;1 = 11 | 0110  = 111 </span><br>    n |= n &gt;&gt;&gt; <span class="hljs-number">2</span>; <span class="hljs-comment">// 111 &gt;&gt;&gt;2 = 1 | 111 = 111</span><br>    n |= n &gt;&gt;&gt; <span class="hljs-number">4</span>; <span class="hljs-comment">// 111 &gt;&gt;&gt;4 = 0 | 111 = 111</span><br>    n |= n &gt;&gt;&gt; <span class="hljs-number">8</span>; <span class="hljs-comment">// 111 &gt;&gt;&gt;8 = 0 | 111 = 111</span><br>    n |= n &gt;&gt;&gt; <span class="hljs-number">16</span>; <span class="hljs-comment">// 111 &gt;&gt;&gt;16 = 0 | 111 = 111</span><br>    <span class="hljs-keyword">return</span> (n &lt; <span class="hljs-number">0</span>) ? <span class="hljs-number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="hljs-number">1</span>; <span class="hljs-comment">// n + 1  = 7+1 = 8</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="3-集合最大容量"><a href="#3-集合最大容量" class="headerlink" title="3. 集合最大容量"></a>3. 集合最大容量</h4>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1*2的30次方</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAXIMUM_CAPACITY</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">30</span>;<br></code></pre></td></tr></table></figure><h4 id="4-默认的负载因子"><a href="#4-默认的负载因子" class="headerlink" title="4. 默认的负载因子"></a>4. 默认的负载因子</h4>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">float</span> <span class="hljs-variable">DEFAULT_LOAD_FACTOR</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.75f</span>;<br></code></pre></td></tr></table></figure><h4 id="5-当链表的长度超过8并且长度超过64会转换成红黑树"><a href="#5-当链表的长度超过8并且长度超过64会转换成红黑树" class="headerlink" title="5. 当链表的长度超过8并且长度超过64会转换成红黑树"></a>5. 当链表的长度超过8并且长度超过64会转换成红黑树</h4>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//JDK1.8新增</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TREEIFY_THRESHOLD</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;<br></code></pre></td></tr></table></figure>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">treeifyBin</span><span class="hljs-params">(Node&lt;K,V&gt;[] tab, <span class="hljs-type">int</span> hash)</span> &#123;<br>    <span class="hljs-type">int</span> n, index; Node&lt;K,V&gt; e;<br>    <span class="hljs-comment">//tab等于空，或者tab长度小于64，不会进行树化，而是进行扩容</span><br>    <span class="hljs-keyword">if</span> (tab == <span class="hljs-literal">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)<br>        resize();<br>&#125;<br></code></pre></td></tr></table></figure><p> <strong>为什么大于8才转为红黑树？</strong></p><ul><li><p>在<code>HashMap</code>中有一段注释说明：由于<code>TreeNode</code>节点的大小约是常规节点的两倍，因此要保证一个链表包含足够多的节点时才使用树节点。默认是链表长度达到8转换成红黑树，长度降到6就转换成链表，<strong>体现了时间和空间平衡的思想。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java">* Because TreeNodes are about twice the size of regular nodes, we<br>* use them only when bins contain enough nodes to warrant use<br>* (see TREEIFY_THRESHOLD). And when they become too <span class="hljs-title function_">small</span> <span class="hljs-params">(due to</span><br><span class="hljs-params">* removal or resizing)</span> they are converted back to plain bins.  In<br>* usages with well-distributed user hashCodes, tree bins are<br>* rarely used.  Ideally, under random hashCodes, the frequency of<br>* nodes in bins follows a Poisson distribution<br>* (http:<span class="hljs-comment">//en.wikipedia.org/wiki/Poisson_distribution) with a</span><br>* parameter of about <span class="hljs-number">0.5</span> on average <span class="hljs-keyword">for</span> the <span class="hljs-keyword">default</span> resizing<br>* threshold of <span class="hljs-number">0.75</span>, although with a large variance because of<br>* resizing granularity. Ignoring variance, the expected<br>* occurrences of list size k <span class="hljs-title function_">are</span> <span class="hljs-params">(exp(-<span class="hljs-number">0.5</span>)</span> * pow(<span class="hljs-number">0.5</span>, k) /<br>* factorial(k)). The first values are:<br> <span class="hljs-comment">//TreeNodes占用空间大约是普通节点的两倍，所以我们只在箱子包含足够的节点时才使用树节点。当节点变少(由于删除或调整大小)时，就会被转换回普通的桶。在使用分布良好的用户hashcode时，很少使用树箱。理想情况下，在随机哈希码下，箱子中节点的频率服从&quot;泊松分布&quot;，默认调整阈值为0.75，平均参数约为0.5，尽管由于调整粒度的差异很大。忽略方差，列表大小k的预期出现次数是(exp(-0.5)*pow(0.5, k)/factorial(k))</span><br> <span class="hljs-number">0</span>:    <span class="hljs-number">0.60653066</span><br> <span class="hljs-number">1</span>:    <span class="hljs-number">0.30326533</span><br> <span class="hljs-number">2</span>:    <span class="hljs-number">0.07581633</span><br> <span class="hljs-number">3</span>:    <span class="hljs-number">0.01263606</span><br> <span class="hljs-number">4</span>:    <span class="hljs-number">0.00157952</span><br> <span class="hljs-number">5</span>:    <span class="hljs-number">0.00015795</span><br> <span class="hljs-number">6</span>:    <span class="hljs-number">0.00001316</span><br> <span class="hljs-number">7</span>:    <span class="hljs-number">0.00000094</span><br> <span class="hljs-number">8</span>:    <span class="hljs-number">0.00000006</span><br> more: less than <span class="hljs-number">1</span> in ten million<br></code></pre></td></tr></table></figure><p>上面这段话概括来说：如果<code>hashCode</code>分布良好，那么红黑树这种形式很少被用到。在理想情况下，链表长度符合泊松分布，各个长度命中率以此递减，<strong>同一个节点命中8次的概率仅为0.00000006。</strong>这是一个小于千万分之一的概率，通常我们的<code>Map</code>不会存在这么多数据，所以通常情况下并不会发生链表转红黑树的操作。</p></li><li><p>其他说法 红黑树的平均查找时间复杂度是log（n），如果长度为8，平均查找时间为log（8）&#x3D;3，链表的平均查找时间为n&#x2F;2，即4，这样转换成树的效率较为明显；如果链表长度为6，链表的时间复杂度为6&#x2F;2&#x3D;3，而log（6）&#x3D;2.6，虽然速度也提高了，但是转换成树的时间以及树的平衡所花的时间并不短</p></li></ul><h4 id="6-当链表的长度小于6则会从红黑树转回链表"><a href="#6-当链表的长度小于6则会从红黑树转回链表" class="headerlink" title="6. 当链表的长度小于6则会从红黑树转回链表"></a>6. 当链表的长度小于6则会从红黑树转回链表</h4>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">UNTREEIFY_THRESHOLD</span> <span class="hljs-operator">=</span> <span class="hljs-number">6</span>;<br></code></pre></td></tr></table></figure><h4 id="7-链表转红黑树"><a href="#7-链表转红黑树" class="headerlink" title="7. 链表转红黑树"></a>7. 链表转红黑树</h4><p><strong>当<code>HashMap</code>的数组长度大于或者等于这个阈值时，表中的桶才能从链表转换成红黑树，否则桶内的元素超过8时会扩容，而不是进行树化。为避免在扩容和树化之间冲突，这个值至少为<code>4*TREEIFY_THRESHOLD</code></strong></p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MIN_TREEIFY_CAPACITY</span> <span class="hljs-operator">=</span> <span class="hljs-number">64</span>;<br><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">treeifyBin</span><span class="hljs-params">(Node&lt;K,V&gt;[] tab, <span class="hljs-type">int</span> hash)</span> &#123;<br>    <span class="hljs-type">int</span> n, index; Node&lt;K,V&gt; e;<br>    <span class="hljs-comment">//tab等于空，或者tab长度小于64，不会进行树化，而是进行扩容</span><br>    <span class="hljs-keyword">if</span> (tab == <span class="hljs-literal">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)<br>        resize();<br>&#125;<br></code></pre></td></tr></table></figure><p>   原因：数组比较小的情况下变为红黑树反而会降低效率，因为红黑树需要进行左旋、右旋和变色操作来保持树平衡</p><h4 id="8-存储元素的数组（必须是2的n次幂）"><a href="#8-存储元素的数组（必须是2的n次幂）" class="headerlink" title="8. 存储元素的数组（必须是2的n次幂）"></a>8. 存储元素的数组（必须是2的n次幂）</h4>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//延迟加载，首次使用的时候初始化</span><br><span class="hljs-keyword">transient</span> Node&lt;K,V&gt;[] table;<br></code></pre></td></tr></table></figure><h4 id="9-集合当前存放的元素个数"><a href="#9-集合当前存放的元素个数" class="headerlink" title="9. 集合当前存放的元素个数"></a>9. 集合当前存放的元素个数</h4>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//当前Map中的元素个数</span><br><span class="hljs-keyword">transient</span> <span class="hljs-type">int</span> size;<br></code></pre></td></tr></table></figure><h4 id="10-记录集合的修改次数"><a href="#10-记录集合的修改次数" class="headerlink" title="10. 记录集合的修改次数"></a>10. 记录集合的修改次数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//每次扩容和更改Map结构的计数器，并发修改时与比较，不相等会触发快速失败</span><br><span class="hljs-keyword">transient</span> <span class="hljs-type">int</span> modCount;<br></code></pre></td></tr></table></figure><h4 id="11-阈值"><a href="#11-阈值" class="headerlink" title="11. 阈值"></a>11. 阈值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//当实际大小（容量*负载因子）超过临界值时会触发扩容</span><br><span class="hljs-type">int</span> threshold;<br></code></pre></td></tr></table></figure><h4 id="12-负载因子"><a href="#12-负载因子" class="headerlink" title="12. 负载因子"></a>12. 负载因子</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">float</span> loadFactor;<br></code></pre></td></tr></table></figure><ul><li><p>负载因子概述</p><p><code>loadFactor</code>负载因子，是用来衡量<code>HashMap</code>填满的程度，表示<code>HashMap</code>疏密程度，关系到发生<code>hash</code>碰撞的概率。</p></li><li><p>为什么负载因子默认为0.75？</p><p><code>loadFactor</code>太大会导致<code>hash</code>碰撞频繁，存放的数据拥挤，查找效率低；太小导致空间利用率低，存放的数据分散。<strong>默认值0.75是官方给出的一个空间和时间的平衡。</strong></p></li></ul><h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><p>构造一个空的<code>HashMap</code>，<strong>默认大小16，负载因子0.75</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">HashMap</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//默认的0.75赋值给负载因子</span><br>    <span class="hljs-built_in">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="hljs-comment">// all other fields defaulted</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>构造一个指定大小的<code>HashMap</code>，<strong>负载因子默认0.75</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">HashMap</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity)</span> &#123;<br>    <span class="hljs-comment">//传入指定的大小，以及默认的0.75负载因子</span><br>    <span class="hljs-built_in">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>构造一个指定大小并且设置负载因子的<code>HashMap</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">HashMap</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity, <span class="hljs-type">float</span> loadFactor)</span> &#123;<br>    <span class="hljs-comment">//判断集合大小是否合法</span><br>    <span class="hljs-keyword">if</span> (initialCapacity &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Illegal initial capacity: &quot;</span> +<br>                                           initialCapacity);<br>    <span class="hljs-comment">//集合大小是否超过最大值</span><br>    <span class="hljs-keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)<br>        initialCapacity = MAXIMUM_CAPACITY;<br>    <span class="hljs-comment">//负载因子是否合法</span><br>    <span class="hljs-keyword">if</span> (loadFactor &lt;= <span class="hljs-number">0</span> || Float.isNaN(loadFactor))<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Illegal load factor: &quot;</span> +<br>                                           loadFactor);<br>    <span class="hljs-comment">//设置负载因子</span><br>    <span class="hljs-built_in">this</span>.loadFactor = loadFactor;<br>    <span class="hljs-comment">//当传入初始容量，阈值等于初始容量（会被转换成2的次幂），否则默认为16*0.75=12</span><br>    <span class="hljs-built_in">this</span>.threshold = tableSizeFor(initialCapacity);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注：<code>JDK1.8</code>以后的构造方法，并没有对<code>table</code>成员进行初始化，而是被推迟到了<code>put()</code>方法中。</strong></p></li><li><p>包含另一个<code>Map</code>，<strong>负载因子取默认值0.75</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">HashMap</span><span class="hljs-params">(Map&lt;? extends K, ? extends V&gt; m)</span> &#123;<br>    <span class="hljs-comment">//负载因子默认0.75</span><br>    <span class="hljs-built_in">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;<br>    <span class="hljs-comment">//把传入的map赋值到新的hashmap中去</span><br>    putMapEntries(m, <span class="hljs-literal">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putMapEntries</span><span class="hljs-params">(Map&lt;? extends K, ? extends V&gt; m, <span class="hljs-type">boolean</span> evict)</span> &#123;<br>    <span class="hljs-comment">//获取传入map的大小</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> m.size();<br>    <span class="hljs-keyword">if</span> (s &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">//判断table是否初始化</span><br>        <span class="hljs-keyword">if</span> (table == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// pre-size</span><br>            <span class="hljs-comment">//根据传入的map大小计算当前hashmap需要的容量</span><br>            <span class="hljs-type">float</span> <span class="hljs-variable">ft</span> <span class="hljs-operator">=</span> ((<span class="hljs-type">float</span>)s / loadFactor) + <span class="hljs-number">1.0F</span>;<br>            <span class="hljs-comment">//集合容量不能超过最大值</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> ((ft &lt; (<span class="hljs-type">float</span>)MAXIMUM_CAPACITY) ?<br>                     (<span class="hljs-type">int</span>)ft : MAXIMUM_CAPACITY);<br>            <span class="hljs-comment">//如果容量大于阈值，阈值需要重新赋值</span><br>            <span class="hljs-keyword">if</span> (t &gt; threshold)<br>                <span class="hljs-comment">//将容量转换为大于并且最接近的2的次幂</span><br>                threshold = tableSizeFor(t);<br>        &#125;<br>        <span class="hljs-comment">//table已经初始化过</span><br>        <span class="hljs-comment">//如果map集合中的容量大于阈值，进行扩容操作</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s &gt; threshold)<br>            resize();<br>        <span class="hljs-comment">//遍历map中的元素 并且put到新的hashmap中</span><br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">K</span>, ? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">V</span>&gt; e : m.entrySet()) &#123;<br>            <span class="hljs-type">K</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> e.getKey();<br>            <span class="hljs-type">V</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> e.getValue();<br>            putVal(hash(key), key, value, <span class="hljs-literal">false</span>, evict);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>问：<code>float ft = ((float)s / loadFactor) + 1.0F;</code>为什么要加1.0F？</p><p>答：ft计算出的结果是小数，后面转成<code>int</code>会丢弃小数点后面的小数，加1.0F是相当于对一个小数做一个向上取整以尽可能的保证更大容量。更大容量能减少<code>resize</code>的调用次数，这样可以减少数组的扩容次数提高效率。</p></li></ul><h3 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h3><h4 id="1-hash"><a href="#1-hash" class="headerlink" title="1. hash()"></a>1. <code>hash()</code></h4>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-type">int</span> h;<br>    <span class="hljs-comment">//如果为空，默认给0，否则首先计算hashCode值，然后将hashCode与HashCode右移16位后的值做异或运算</span><br>    <span class="hljs-keyword">return</span> (key == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>HashMap</code>中的<code>hash</code>算法，先根据<code>key</code>计算出<code>hashCode</code>值，然后将<code>hashCode</code>与<code>hashCode</code>右移16位后的值做一个异或操作扰动运算，减少<code>hashCode</code>的碰撞概率。</p><p><strong>注：<code>hashCode</code>高16位不变</strong></p><p>原因：当数组较小时，假设长度为16时，在计算下标时用<code>hashCode &amp; length-1</code>时，因为<code>length</code>只有16<code>length-1</code>转换为2进制为1111，其他位置为0。如果不进行扰动运算直接计算下表的话<code>hashCode</code>就只有后四位参与运算，碰撞几率大大增加。</p><p><img src="/img/Java%E9%9B%86%E5%90%88%E4%B9%8BMap.assets/image-20221016142417739.png" alt="判断下标位置"></p><h4 id="2-put"><a href="#2-put" class="headerlink" title="2.  put()"></a>2.  <code>put()</code></h4><p><code>JDK1.8</code>之前是头插法，多线程情况下容易出现循环链表，<code>JDK1.8</code>之后改为尾插法，并且引入红黑树。（七上八下）</p><p><strong><code>JDK1.8</code>之后采用懒加载方式，<code>table</code>在第一次调用put时才会创建，也叫延迟初始化。</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> V <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> &#123;<br>    <span class="hljs-keyword">return</span> putVal(hash(key), key, value, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> V <span class="hljs-title function_">putVal</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, K key, V value, <span class="hljs-type">boolean</span> onlyIfAbsent,</span><br><span class="hljs-params">               <span class="hljs-type">boolean</span> evict)</span> &#123;<br>    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="hljs-type">int</span> n, i;<br>    <span class="hljs-comment">//如果数组为空或者长度为0，则进行初始化</span><br>    <span class="hljs-keyword">if</span> ((tab = table) == <span class="hljs-literal">null</span> || (n = tab.length) == <span class="hljs-number">0</span>)<br>        n = (tab = resize()).length;<br>    <span class="hljs-comment">//查看当前元素的hash值计算出的索引位置是否已经有元素，即是否发生hash碰撞</span><br>    <span class="hljs-comment">//如果为空，直接生成一个新的节点</span><br>    <span class="hljs-keyword">if</span> ((p = tab[i = (n - <span class="hljs-number">1</span>) &amp; hash]) == <span class="hljs-literal">null</span>)<br>        tab[i] = newNode(hash, key, value, <span class="hljs-literal">null</span>);<br>    <span class="hljs-comment">//索引处已经有元素，即发生hash碰撞</span><br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//临时变量</span><br>        Node&lt;K,V&gt; e; K k;<br>        <span class="hljs-comment">//判断已存在元素的key和当前key是否相等，如果相等直接覆盖原值即可</span><br>        <span class="hljs-keyword">if</span> (p.hash == hash &amp;&amp; ((k = p.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>            e = p;<br>        <span class="hljs-comment">//当前索引的bucket如果是红黑树，按照红黑树的方法进行插入或者修改</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p <span class="hljs-keyword">instanceof</span> TreeNode)<br>            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="hljs-built_in">this</span>, tab, hash, key, value);<br>        <span class="hljs-comment">//索引处的bucket是链表</span><br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//遍历链表下的所有元素</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">binCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; ; ++binCount) &#123;<br>                <span class="hljs-comment">//判断索引处的链表是最后一个元素</span><br>                <span class="hljs-keyword">if</span> ((e = p.next) == <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-comment">//生成一个新的节点添加到最后</span><br>                    p.next = newNode(hash, key, value, <span class="hljs-literal">null</span>);<br>                    <span class="hljs-comment">//判断是否需要将链表转换为红黑树</span><br>                    <span class="hljs-keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="hljs-number">1</span>) <span class="hljs-comment">// -1 for 1st</span><br>                        <span class="hljs-comment">//树化，并不一定成功，当table长度小于64时，优先扩容</span><br>                        treeifyBin(tab, hash);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-comment">//如果链表中的key和当前key相等，则直接修改值</span><br>                <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>                    <span class="hljs-keyword">break</span>;<br>                p = e;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//集合中已经存在当前key，直接修改value并返回旧值。</span><br>        <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// existing mapping for key</span><br>            <span class="hljs-type">V</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> e.value;<br>            <span class="hljs-comment">//onlyIfAbsent 默认传入false，如果传入true并且oldValue不为null，不可覆盖。</span><br>            <span class="hljs-keyword">if</span> (!onlyIfAbsent || oldValue == <span class="hljs-literal">null</span>)<br>                e.value = value;<br>            afterNodeAccess(e);<br>            <span class="hljs-keyword">return</span> oldValue;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//记录集合发生变化的次数</span><br>    ++modCount;<br>    <span class="hljs-comment">//判断是否需要扩容</span><br>    <span class="hljs-keyword">if</span> (++size &gt; threshold)<br>        resize();<br>    afterNodeInsertion(evict);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong><code>put</code>流程：</strong></p><ol><li>先通过<code>hash</code>值计算<code>key</code>映射到桶的位置</li><li>如果桶上没有其他元素，直接插入</li><li>如果出现<code>hash</code>碰撞：<ol><li>判断<code>key</code>是否相等，如果相等直接修改<code>value</code>即可</li><li>判断该桶是否用红黑树处理冲突，如果是则调用红黑树的方法对元素进行操作</li><li>如果不符合之前的条件，则按照链表的方式遍历处理，如果找到<code>key</code>相同的元素直接修改<code>value</code>；如果遍历到尾节点，则新生成一个节点添加到尾节点后面；然后判断是否需要将链表转成红黑树</li></ol></li><li>记录集合发生的变化次数，并判断是否需要扩容</li></ol><h4 id="3-treeifyBin"><a href="#3-treeifyBin" class="headerlink" title="3. treeifyBin()"></a>3. <code>treeifyBin()</code></h4><p>当链表节点添加过元素后会判断链表长度是否大于<code>TREEIFY_THRESHOLD</code>临界值8，如果大于则调用<code>treeifyBin</code>方法进行转换红黑树操作（并不一定成功）。</p><p><code>treeifyBin</code>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">treeifyBin</span><span class="hljs-params">(Node&lt;K,V&gt;[] tab, <span class="hljs-type">int</span> hash)</span> &#123;<br>    <span class="hljs-type">int</span> n, index; Node&lt;K,V&gt; e;<br>    <span class="hljs-comment">//如果tab为空或者tab长度小于64则优先进行扩容</span><br>    <span class="hljs-keyword">if</span> (tab == <span class="hljs-literal">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)<br>        resize();<br>    <span class="hljs-comment">//如果tab长度大于64，进行树化操作</span><br>    <span class="hljs-comment">//根据hash和数组长度取余得到链表的首节点</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((e = tab[index = (n - <span class="hljs-number">1</span>) &amp; hash]) != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">//定义首节点hd 尾节点tl</span><br>        TreeNode&lt;K,V&gt; hd = <span class="hljs-literal">null</span>, tl = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">do</span> &#123;<span class="hljs-comment">//遍历列表</span><br>            <span class="hljs-comment">//将当前节点转换成树节点</span><br>            TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class="hljs-literal">null</span>);<br>            <span class="hljs-comment">//如果头节点为空，则p节点为头节点</span><br>            <span class="hljs-keyword">if</span> (tl == <span class="hljs-literal">null</span>)<br>                hd = p;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//如果存在头节点，则p的prev指向头节点</span><br>                p.prev = tl;<br>                <span class="hljs-comment">//头节点的next指向p节点</span><br>                tl.next = p;<br>            &#125;<br>            <span class="hljs-comment">//将尾节点tl指向p</span><br>            tl = p;<br>        &#125; <span class="hljs-keyword">while</span> ((e = e.next) != <span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">//把处理后的首节点放到数组上，并且不为空</span><br>        <span class="hljs-keyword">if</span> ((tab[index] = hd) != <span class="hljs-literal">null</span>)<br>            <span class="hljs-comment">//将链表进行树化</span><br>            hd.treeify(tab);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-resize"><a href="#4-resize" class="headerlink" title="4.  resize()"></a>4.  <code>resize()</code></h4><p>当<code>HashMap</code>中元素个数超过阈值（threshold &#x3D; 数组长度 * 负载因子）或者链表长度过长（链表长度大于8，数组长度小于64）时，会发生扩容操作。扩容会创建新的数组，遍历结合中的元素重新确定索引下标位置，非常耗时索引要尽量避免<code>resize</code>操作。</p><p>每次扩容为原来容量的2倍，<code>resize</code>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;<br>    <span class="hljs-comment">//原table</span><br>    Node&lt;K,V&gt;[] oldTab = table;<br>    <span class="hljs-comment">//原table大小</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">oldCap</span> <span class="hljs-operator">=</span> (oldTab == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : oldTab.length;<br>    <span class="hljs-comment">//原阈值</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">oldThr</span> <span class="hljs-operator">=</span> threshold;<br>    <span class="hljs-comment">//新的table大小和阈值</span><br>    <span class="hljs-type">int</span> newCap, newThr = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//原容量大于0，表示原table执行过put方法 集合中已经有数据</span><br>    <span class="hljs-keyword">if</span> (oldCap &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">//原集合已经达到集合最大容量，无法扩容，直接返回原数组</span><br>        <span class="hljs-keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;<br>            threshold = Integer.MAX_VALUE;<br>            <span class="hljs-keyword">return</span> oldTab;<br>        &#125;<br>        <span class="hljs-comment">//新table的大小和阈值相较于原大小翻倍</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="hljs-number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp; oldCap &gt;= DEFAULT_INITIAL_CAPACITY)<br>            newThr = oldThr &lt;&lt; <span class="hljs-number">1</span>; <span class="hljs-comment">// double threshold</span><br>    &#125;<br>    <span class="hljs-comment">//如果原table的大小小于0但阈值大于0，说明集合中没有put过数据。此时阈值和容量大小相等，所以直接把阈值当成新集合的大小即可。</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (oldThr &gt; <span class="hljs-number">0</span>) <span class="hljs-comment">// initial capacity was placed in threshold</span><br>        newCap = oldThr;<br>    <span class="hljs-comment">//代表原table是使用空参数初始化的，所以新table直接使用默认值即可。</span><br>    <span class="hljs-keyword">else</span> &#123;               <span class="hljs-comment">// zero initial threshold signifies using defaults</span><br>        newCap = DEFAULT_INITIAL_CAPACITY;<br>        newThr = (<span class="hljs-type">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);<br>    &#125;<br>    <span class="hljs-comment">//如果新集合的阈值等于0，则重新计算</span><br>    <span class="hljs-keyword">if</span> (newThr == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">//新集合的大小 * 负载因子</span><br>        <span class="hljs-type">float</span> <span class="hljs-variable">ft</span> <span class="hljs-operator">=</span> (<span class="hljs-type">float</span>)newCap * loadFactor;<br>        <span class="hljs-comment">//防止计算出来的阈值超过最大值</span><br>        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="hljs-type">float</span>)MAXIMUM_CAPACITY ?<br>                  (<span class="hljs-type">int</span>)ft : Integer.MAX_VALUE);<br>    &#125;<br>    threshold = newThr;<br>    <span class="hljs-comment">//初始化新的集合</span><br>    <span class="hljs-meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span><br>    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>[newCap];<br>    table = newTab;<br>    <span class="hljs-keyword">if</span> (oldTab != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">//遍历旧元素放入新的集合中</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; oldCap; ++j) &#123;<br>            Node&lt;K,V&gt; e;<br>            <span class="hljs-keyword">if</span> ((e = oldTab[j]) != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">//辅助gc</span><br>                oldTab[j] = <span class="hljs-literal">null</span>;<br>                <span class="hljs-comment">//说明原集合中此桶只有一个节点，直接rehash放入即可</span><br>                <span class="hljs-keyword">if</span> (e.next == <span class="hljs-literal">null</span>)<br>                    newTab[e.hash &amp; (newCap - <span class="hljs-number">1</span>)] = e;<br>                <span class="hljs-comment">//说明原集合中此桶为数节点，按照红黑树的rehash即可</span><br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> TreeNode)<br>                    ((TreeNode&lt;K,V&gt;)e).split(<span class="hljs-built_in">this</span>, newTab, j, oldCap);<br>                <span class="hljs-comment">//原集合中此桶存储的为链表</span><br>                <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// preserve order</span><br>                    Node&lt;K,V&gt; loHead = <span class="hljs-literal">null</span>, loTail = <span class="hljs-literal">null</span>;<br>                    Node&lt;K,V&gt; hiHead = <span class="hljs-literal">null</span>, hiTail = <span class="hljs-literal">null</span>;<br>                    Node&lt;K,V&gt; next;<br>                    <span class="hljs-comment">//遍历链表中每个元素</span><br>                    <span class="hljs-keyword">do</span> &#123;<br>                        next = e.next;<br>                        <span class="hljs-comment">//判断节点位置是否需要变更</span><br>                        <span class="hljs-comment">//索引不变</span><br>                        <span class="hljs-keyword">if</span> ((e.hash &amp; oldCap) == <span class="hljs-number">0</span>) &#123;<br>                            <span class="hljs-keyword">if</span> (loTail == <span class="hljs-literal">null</span>)<br>                                loHead = e;<br>                            <span class="hljs-keyword">else</span><br>                                loTail.next = e;<br>                            loTail = e;<br>                        &#125;<br>                        <span class="hljs-comment">//索引变成 原索引+oldCap</span><br>                        <span class="hljs-keyword">else</span> &#123;<br>                            <span class="hljs-keyword">if</span> (hiTail == <span class="hljs-literal">null</span>)<br>                                hiHead = e;<br>                            <span class="hljs-keyword">else</span><br>                                hiTail.next = e;<br>                            hiTail = e;<br>                        &#125;<br>                    &#125; <span class="hljs-keyword">while</span> ((e = next) != <span class="hljs-literal">null</span>);<br>                    <span class="hljs-comment">//将尾节点置空</span><br>                    <span class="hljs-keyword">if</span> (loTail != <span class="hljs-literal">null</span>) &#123;<br>                        loTail.next = <span class="hljs-literal">null</span>;<br>                        <span class="hljs-comment">//将索引不变的放到新table[j]的位置</span><br>                        newTab[j] = loHead;<br>                    &#125;<br>                    <span class="hljs-comment">//将尾节点置空</span><br>                    <span class="hljs-keyword">if</span> (hiTail != <span class="hljs-literal">null</span>) &#123;<br>                        hiTail.next = <span class="hljs-literal">null</span>;<br>                        <span class="hljs-comment">//将索引改变的放到新table[j+oldCap]的位置</span><br>                        newTab[j + oldCap] = hiHead;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> newTab;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong><code>HashMap</code>扩容后，原节点要么在新数组的之前的位置，要么就在原位置+原数组长度的位置。</strong></p><p><code>if ((e.hash &amp; oldCap) == 0)</code>这段代码是用来判断扩容后的元素位置是否发生改变</p><p><img src="/img/Java%E9%9B%86%E5%90%88%E4%B9%8BMap.assets/image-20221016221133943.png" alt="rehash"></p><p>如图，当数组长度为16时，计算下标相当于只看<code>hash</code>的最后四位；当数组长度扩容到32后，因为后4位已经计算过位置，就只要看第五位是否为1，为1则加上16，为0则原位置不变。</p><h4 id="5-get"><a href="#5-get" class="headerlink" title="5. get()"></a>5. <code>get()</code></h4><p><code>get()</code>方法内部调用<code>getNode()</code>来获取集合中的元素，通过<code>key</code>计算<code>table</code>的索引位置，根据索引位置不同的存储结构具体处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> V <span class="hljs-title function_">get</span><span class="hljs-params">(Object key)</span> &#123;<br>    Node&lt;K,V&gt; e;<br>    <span class="hljs-keyword">return</span> (e = getNode(hash(key), key)) == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : e.value;<br>&#125;<br><br><span class="hljs-keyword">final</span> Node&lt;K,V&gt; <span class="hljs-title function_">getNode</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, Object key)</span> &#123;<br>    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="hljs-type">int</span> n; K k;<br>    <span class="hljs-comment">//table不为空并且传入的key存在</span><br>    <span class="hljs-keyword">if</span> ((tab = table) != <span class="hljs-literal">null</span> &amp;&amp; (n = tab.length) &gt; <span class="hljs-number">0</span> &amp;&amp;<br>        (first = tab[(n - <span class="hljs-number">1</span>) &amp; hash]) != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">//判断索引的第一个元素的key和传入的key相等，则直接返回该元素</span><br>        <span class="hljs-keyword">if</span> (first.hash == hash &amp;&amp; <span class="hljs-comment">// always check first node</span><br>            ((k = first.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>            <span class="hljs-keyword">return</span> first;<br>        <span class="hljs-comment">//如果索引位置不止一个元素</span><br>        <span class="hljs-keyword">if</span> ((e = first.next) != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">//索引位置是红黑树</span><br>            <span class="hljs-keyword">if</span> (first <span class="hljs-keyword">instanceof</span> TreeNode)<br>                <span class="hljs-keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);<br>            <span class="hljs-keyword">do</span> &#123;<span class="hljs-comment">//链表处理</span><br>                <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;<br>                    ((k = e.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>                    <span class="hljs-keyword">return</span> e;<br>            &#125; <span class="hljs-keyword">while</span> ((e = e.next) != <span class="hljs-literal">null</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-remove"><a href="#6-remove" class="headerlink" title="6. remove()"></a>6. <code>remove()</code></h4><p><code>remove()</code>方法内部调用<code>removeNode()</code>来具体删除。找到对应元素之后删除，如果是红黑树小于6时会退化成链表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> V <span class="hljs-title function_">remove</span><span class="hljs-params">(Object key)</span> &#123;<br>    Node&lt;K,V&gt; e;<br>    <span class="hljs-keyword">return</span> (e = removeNode(hash(key), key, <span class="hljs-literal">null</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>)) == <span class="hljs-literal">null</span> ?<br>        <span class="hljs-literal">null</span> : e.value;<br>&#125;<br><br><span class="hljs-keyword">final</span> Node&lt;K,V&gt; <span class="hljs-title function_">removeNode</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, Object key, Object value,</span><br><span class="hljs-params">                           <span class="hljs-type">boolean</span> matchValue, <span class="hljs-type">boolean</span> movable)</span> &#123;<br>    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="hljs-type">int</span> n, index;<br>    <span class="hljs-comment">//table不为空并且集合中的存在传入的key</span><br>    <span class="hljs-keyword">if</span> ((tab = table) != <span class="hljs-literal">null</span> &amp;&amp; (n = tab.length) &gt; <span class="hljs-number">0</span> &amp;&amp;<br>        (p = tab[index = (n - <span class="hljs-number">1</span>) &amp; hash]) != <span class="hljs-literal">null</span>) &#123;<br>        Node&lt;K,V&gt; node = <span class="hljs-literal">null</span>, e; K k; V v;<br>        <span class="hljs-comment">//如果索引位置的第一个元素的key和要删除的key相同，则把删除的标记 后续删除</span><br>        <span class="hljs-keyword">if</span> (p.hash == hash &amp;&amp;<br>            ((k = p.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>            node = p;<br>        <span class="hljs-comment">//如果索引位置的不止一个元素</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((e = p.next) != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">//如果索引位置存储的是红黑树</span><br>            <span class="hljs-keyword">if</span> (p <span class="hljs-keyword">instanceof</span> TreeNode)<br>                <span class="hljs-comment">//调用红黑树的处理返回对应元素</span><br>                node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);<br>            <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//如果是链表</span><br>                <span class="hljs-keyword">do</span> &#123;<br>                    <span class="hljs-comment">//遍历链表对比key是否相等，如果相同标记元素</span><br>                    <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;<br>                        ((k = e.key) == key ||<br>                         (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k)))) &#123;<br>                        node = e;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    p = e;<br>                &#125; <span class="hljs-keyword">while</span> ((e = e.next) != <span class="hljs-literal">null</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//如果要删除的node不为空，说明找到了要删除的元素</span><br>        <span class="hljs-comment">//matchValue是否需要对比value，true则进行value的比较，相同才删除；false直接删除不比较</span><br>        <span class="hljs-keyword">if</span> (node != <span class="hljs-literal">null</span> &amp;&amp; (!matchValue || (v = node.value) == value ||<br>                             (value != <span class="hljs-literal">null</span> &amp;&amp; value.equals(v)))) &#123;<br>            <span class="hljs-comment">//如果是红黑树，调用红黑树的处理方法删除</span><br>            <span class="hljs-keyword">if</span> (node <span class="hljs-keyword">instanceof</span> TreeNode)<br>                ((TreeNode&lt;K,V&gt;)node).removeTreeNode(<span class="hljs-built_in">this</span>, tab, movable);<br>            <span class="hljs-comment">//node是首节点，需要把node的next节点设置为首节点</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (node == p)<br>                tab[index] = node.next;<br>            <span class="hljs-comment">//node不是首节点，链表直接指向node的next节点即可</span><br>            <span class="hljs-keyword">else</span><br>                p.next = node.next;<br>            ++modCount;<br>            --size;<br>            afterNodeRemoval(node);<br>            <span class="hljs-keyword">return</span> node;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="JDK1-7VSJDK1-8"><a href="#JDK1-7VSJDK1-8" class="headerlink" title="JDK1.7VSJDK1.8"></a><code>JDK1.7</code>VS<code>JDK1.8</code></h3><p><code>HashMap</code>在<code>JDK1.8</code>时相较于<code>JDK1.7</code>底层实现进行了一些优化。减少了Hash冲突，提高了哈希表的存取效率。</p><ol><li>底层数据结构不一样：<ul><li>1.7底层采用数组+链表实现</li><li>1.8底层改用数组+链表+红黑树</li></ul></li><li>初始化:<ul><li>1.7赋值给一个空数组，put时初始化</li><li>1.8没有赋值，懒加载，put时初始化</li></ul></li><li>新增节点<ul><li>1.7采用头插法（先将原位置的数据后移1位，再插入该元素到头位置）</li><li>1.8采用尾插法（直接插入到链表尾部&#x2F;红黑树）</li></ul></li><li><code>Hash</code>算法<ul><li>1.7扰动算法进行了4次位运算+5次异或运算</li><li>1.8扰动算法进行了1次位运算+1次异或运算</li></ul></li><li>扩容<ul><li>1.7 插入前扩容</li><li>1.8插入后、初始化、树化时扩容</li></ul></li><li>扩容后<code>rehash</code><ul><li>1.7重新计算<code>hash</code>值。</li><li>1.8只需要计算<code>hash &amp; length</code>，来确定扩容后的位置（当前位置 或者 当前位置+ 原数组长度）</li></ul></li></ol><h2 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h2><h3 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h3><p><code>LinkedHashMap</code>是<code>HashMap</code>子类，在<code>HashMap</code>的基础上，对于每一个节点用双向链表来连接，可以理解为<code>LinkedHashMap = HashMap + LinkedList</code>，<code>LinkedHashMap</code>保证了元素的迭代顺序，该迭代顺序可以是插入顺序或者访问顺序。</p><h3 id="继承关系-2"><a href="#继承关系-2" class="headerlink" title="继承关系"></a>继承关系</h3><p><img src="/img/Java%E9%9B%86%E5%90%88%E4%B9%8BMap.assets/image-20221027165949423.png" alt="LinkedHashMap"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;K,V&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HashMap</span>&lt;K,V&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Map</span>&lt;K,V&gt;<br></code></pre></td></tr></table></figure><ul><li><code>LinkedHashMap</code>继承自<code>HashMap</code>，所以具备<code>HashMap</code>的诸多特性的同时也添加了一些新特性。</li></ul><h3 id="成员变量-1"><a href="#成员变量-1" class="headerlink" title="成员变量"></a>成员变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//双端链表的头节点</span><br><span class="hljs-keyword">transient</span> LinkedHashMap.Entry&lt;K,V&gt; head;<br><span class="hljs-comment">//双端链表的尾节点</span><br><span class="hljs-keyword">transient</span> LinkedHashMap.Entry&lt;K,V&gt; tail;<br><span class="hljs-comment">//迭代器的顺序，true表示访问顺序（LRU顺序），false表示插入顺序（先进先出）</span><br><span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> accessOrder;<br></code></pre></td></tr></table></figure><h3 id="成员方法-1"><a href="#成员方法-1" class="headerlink" title="成员方法"></a>成员方法</h3><h4 id="1-put"><a href="#1-put" class="headerlink" title="1. put()"></a>1. put()</h4><p><code>LinkedHashMap</code>的<code>put</code>方法直接调用父类<code>HashMap</code>的方法。主要看<code>afterNodeInsertion</code>在<code>LinkedHashMap</code>中的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">afterNodeInsertion</span><span class="hljs-params">(<span class="hljs-type">boolean</span> evict)</span> &#123;<br>    LinkedHashMap.Entry&lt;K,V&gt; first;<br>    <span class="hljs-comment">// evict 只有在构建 Map 的时候才为 false，这里为 true</span><br>    <span class="hljs-comment">//removeEldestEntry方法返回true时，删除最近最久未使用的节点，也就是链表首节点first。</span><br>    <span class="hljs-keyword">if</span> (evict &amp;&amp; (first = head) != <span class="hljs-literal">null</span> &amp;&amp; removeEldestEntry(first)) &#123;<br>        <span class="hljs-type">K</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> first.key;<br>        removeNode(hash(key), key, <span class="hljs-literal">null</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>);<span class="hljs-comment">//移除头节点</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>removeEldestEntry</code>方法默认返回<code>false</code>，如果想让他返回<code>true</code>需要继承<code>LinkedHashMap</code>并且重写这个方法，在实现LRU的缓存中特别有用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">removeEldestEntry</span><span class="hljs-params">(Map.Entry&lt;K,V&gt; eldest)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-get"><a href="#2-get" class="headerlink" title="2. get()"></a>2. get()</h4><p><code>LinkedHashMap</code>的<code>get</code>方法直接调用父类<code>HashMap</code>的<code>getNode</code>方法，然后判断不为空并且迭代顺序为访问顺序时，会调用<code>afterNodeAccess</code>方法对元素进行相关处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> V <span class="hljs-title function_">get</span><span class="hljs-params">(Object key)</span> &#123;<br>    Node&lt;K,V&gt; e;<br>    <span class="hljs-comment">//调用HashMap的getNode方法，如果为null则直接返回null</span><br>    <span class="hljs-keyword">if</span> ((e = getNode(hash(key), key)) == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">//accessOrder为true表示访问顺序，每次访问一个节点时就会把这个节点移动到链表尾部，链表头部就是最近最久未使用的节点。</span><br>    <span class="hljs-keyword">if</span> (accessOrder)<br>        afterNodeAccess(e);<br>    <span class="hljs-keyword">return</span> e.value;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">afterNodeAccess</span><span class="hljs-params">(Node&lt;K,V&gt; e)</span> &#123; <span class="hljs-comment">// move node to last</span><br>    LinkedHashMap.Entry&lt;K,V&gt; last;<br>    <span class="hljs-comment">//LRU访问顺序并且尾节点不是当前访问节点</span><br>    <span class="hljs-keyword">if</span> (accessOrder &amp;&amp; (last = tail) != e) &#123;<br>        <span class="hljs-comment">//向下转型</span><br>        LinkedHashMap.Entry&lt;K,V&gt; p =<br>            (LinkedHashMap.Entry&lt;K,V&gt;)e, b = p.before, a = p.after;<br>        <span class="hljs-comment">//断开p与后继节点的关联</span><br>        p.after = <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">//判断p的前直接点b是否为null，即p是否是首节点</span><br>        <span class="hljs-keyword">if</span> (b == <span class="hljs-literal">null</span>)<br>            <span class="hljs-comment">//是首节点把p的后继节点a设置为首节点</span><br>            head = a;<br>        <span class="hljs-comment">//p不是首节点</span><br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-comment">//把p的前置节点next指向p的后继节点，即把p节点独立出来</span><br>            b.after = a;<br>        <span class="hljs-comment">//判断p是否尾节点</span><br>        <span class="hljs-keyword">if</span> (a != <span class="hljs-literal">null</span>)<br>            <span class="hljs-comment">//不是尾节点，让p的后继节点指向前驱节点a</span><br>            a.before = b;<br>        <span class="hljs-comment">//p是尾节点，感觉这段判断和上面重复，如果p是尾节点进不到当前代码。</span><br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-comment">//把last指向p的前驱节点</span><br>            last = b;<br>        <span class="hljs-comment">//判断last是否为空</span><br>        <span class="hljs-keyword">if</span> (last == <span class="hljs-literal">null</span>)<br>            <span class="hljs-comment">//last为null说明p是尾节点或者只有p一个节点</span><br>            head = p;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//将p移动到末尾</span><br>            p.before = last;<br>            last.after = p;<br>        &#125;<br>        <span class="hljs-comment">//更新tail引用</span><br>        tail = p;<br>        ++modCount;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-remove"><a href="#3-remove" class="headerlink" title="3. remove()"></a>3. remove()</h4><p><code>LinkedHashMap</code>的<code>remove</code>方法直接调用父类<code>HashMap</code>的<code>remove</code>方法，<code>LinkedHashMap</code>自己实现了<code>afterNodeRemoval</code>方法，用来控制元素在<code>LinkedHashMap</code>中的迭代顺序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">afterNodeRemoval</span><span class="hljs-params">(Node&lt;K,V&gt; e)</span> &#123; <span class="hljs-comment">// unlink</span><br>    LinkedHashMap.Entry&lt;K,V&gt; p =<br>        (LinkedHashMap.Entry&lt;K,V&gt;)e, b = p.before, a = p.after;<br>    <span class="hljs-comment">//主动断开p节点与其他节点的连接</span><br>    p.before = p.after = <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">//如果p节点是首节点</span><br>    <span class="hljs-keyword">if</span> (b == <span class="hljs-literal">null</span>)<br>        <span class="hljs-comment">//把首节点指向其后继节点</span><br>        head = a;<br>    <span class="hljs-comment">//p节点不是首节点</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-comment">//前驱节点指向后继节点</span><br>        b.after = a;<br>    <span class="hljs-comment">//p是尾节点</span><br>    <span class="hljs-keyword">if</span> (a == <span class="hljs-literal">null</span>)<br>        <span class="hljs-comment">//tail指向p的前驱节点</span><br>        tail = b;<br>    <span class="hljs-comment">//p不是尾节点</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-comment">//后继节点指向前驱节点</span><br>        a.before = b;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="基于LinkedHashMap实现LRU算法"><a href="#基于LinkedHashMap实现LRU算法" class="headerlink" title="基于LinkedHashMap实现LRU算法"></a>基于LinkedHashMap实现LRU算法</h3><blockquote><p>LRU是Least Recently Used的缩写，即最近最少使用算法，选择最近最久未使用的数据予以淘汰。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LRUTest</span>&lt;K,V&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;K,V&gt; &#123;<br><span class="hljs-comment">//最大容量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> maxSize;<br><span class="hljs-comment">//构造方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LRUTest</span><span class="hljs-params">(<span class="hljs-type">int</span> maxSize)</span> &#123;<br>        <span class="hljs-built_in">super</span>(<span class="hljs-number">16</span>,<span class="hljs-number">0.75f</span>,<span class="hljs-literal">true</span>);<br>        <span class="hljs-built_in">this</span>.maxSize = maxSize;<br>    &#125;<br><span class="hljs-comment">//当容量超过LRU设置的最大值开始删除</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">removeEldestEntry</span><span class="hljs-params">(Map.Entry eldest)</span> &#123;<br>        <span class="hljs-keyword">return</span> size() &gt; maxSize;<br>    &#125;<br><span class="hljs-comment">//测试</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        LRUTest&lt;String,Object&gt; test = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LRUTest</span>&lt;&gt;(<span class="hljs-number">3</span>);<br>        test.put(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">1</span>);<br>        test.put(<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-number">2</span>);<br>        test.put(<span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-number">3</span>);<br>        test.put(<span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-number">4</span>);<br>        test.put(<span class="hljs-string">&quot;e&quot;</span>, <span class="hljs-number">5</span>);<br>        System.out.println(test);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h2><h3 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h3><p><code>HashTable</code>和<code>HashMap</code>一样，也是散列表，存储的内容是键值对（<code>key-value</code>）。</p><p><code>HashTable</code>的<code>key</code>和<code>value</code>都不能为<code>null</code>。</p><p><code>HashTable</code>的方法通过<code>synchronized</code>关键字实现线程安全，但由于锁颗粒较大，效率较低。</p><h3 id="继承关系-3"><a href="#继承关系-3" class="headerlink" title="继承关系"></a>继承关系</h3><p><img src="/img/Java%E9%9B%86%E5%90%88%E4%B9%8BMap.assets/image-20221026113448218.png" alt="HashTable"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hashtable</span>&lt;K,V&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Dictionary</span>&lt;K,V&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Map</span>&lt;K,V&gt;, Cloneable, java.io.Serializable <br></code></pre></td></tr></table></figure><p>与<code>HashMap</code>不同的是<code>HashTable</code>继承<code>Dictionary</code>类，没有继承<code>AbstractMap</code>类。<code>Dictionary</code>类是一个抽象类，用来存储键值对，作用和<code>Map</code>类相似。**<code>Dictionary</code>类已经过时，在实现开发中，可以实现<code>Map</code>接口来实现存储键值对的功能。**</p><h3 id="为什么不建议使用"><a href="#为什么不建议使用" class="headerlink" title="为什么不建议使用"></a>为什么不建议使用</h3><p><code>HashTable</code>是遗留类，很多常用的功能和<code>HashMap</code>类似，不同的是它继承Dictionary类，并且是线程安全的。但是由于它是直接在方法上加<code>synchronization</code>关键字，导致锁颗粒太大，并发性不如<code>ConcurrentHashMap</code>。所以<code>HashTable</code>不建议在新代码中使用，不需要线程安全的场景可以用<code>HashMap</code>替代，需要线程安全的可以用<code>ConcurrentHashMap</code>替代。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java集合</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字符串常量池和基本类型的常量池</title>
    <link href="/2022/09/28/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F%E6%B1%A0%E5%92%8C%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%B8%B8%E9%87%8F%E6%B1%A0/"/>
    <url>/2022/09/28/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F%E6%B1%A0%E5%92%8C%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%B8%B8%E9%87%8F%E6%B1%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="字符串常量池和基本类型的常量池"><a href="#字符串常量池和基本类型的常量池" class="headerlink" title="字符串常量池和基本类型的常量池"></a>字符串常量池和基本类型的常量池</h1><p>常量池是为了避免频繁的创建和销毁对象而影响系统性能，其实现了对象的共享。</p><h2 id="String-Pool"><a href="#String-Pool" class="headerlink" title="String Pool"></a>String Pool</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>字符串常量池（String Pool）保存着所有的字符串字面量（literal strings），这些值在编译时期就确定，常量池类似于<code>Java</code>系统级别提供的缓存，存放对象和引用。</p><ul><li><code>String Pool</code>的底层类似一个固定大小的<code>HashTable</code>，每个元素都是<code>key-value</code>结构，采用了数组+单向链表的实现方式，因此也被称为<code>StringTable</code>。其默认大小为60013，这个值可以通过<code>-XX:StringTableSize</code>设置大小</li><li><code>JDK1.6</code>中，字符串常量池放在永久代，从<code>JDK1.7</code>开始字符串常量池被移到了堆中，<code>JDK1.8</code>之后元空间取代了永久代，运行时常量池在元空间，字符串常量池依然在堆中</li><li>字符串面量在类加载时存入到常量池，常量池中的信息都会被加载到运行时常量池中，此时字符串还是常量池中的符号，并不是字符串对象。即第一次使用时才会变为对象，可以避免重复创建字符串对象</li><li>可以使用<code>String</code>的<code>intern()</code>方法将字符串添加到字符串常量池中</li></ul><h3 id="intern方法"><a href="#intern方法" class="headerlink" title="intern方法"></a>intern方法</h3><p><code>intern()</code>方法会将字符串字符串对象尝试放入串池，但是不同<code>JDK</code>版本实现不一样：</p><ul><li><code>JDK1.6</code>：<strong>串池中如果有则不放入，如果没有则将此对象复制一份，然后将副本放入串池，会将串池中的对象返回</strong></li><li><code>JDK1.8</code>：<strong>串池中如果有则不会放入，如果没有则会将对象的引用地址复制一份放入串池，最后将串池中的引用地址返回</strong></li></ul><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringPoolTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;1&quot;</span>);<br>        s.intern();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1&quot;</span>;<br>        System.out.println(s == s2);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;1&quot;</span>) + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;1&quot;</span>);<br>        s3.intern();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;11&quot;</span>;<br>        System.out.println(s3 == s4);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果为：</p><ul><li><code>JDK</code>6下<code>false</code> <code>false</code></li><li><code>JDK8</code>下<code>false</code> <code>true</code></li></ul><h4 id="JDK6"><a href="#JDK6" class="headerlink" title="JDK6"></a>JDK6</h4><p><img src="/img/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F%E6%B1%A0%E5%92%8C%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%B8%B8%E9%87%8F%E6%B1%A0.assets/4903ce64.png" alt="jdk6图"></p><p><strong>注：途中绿色线条代表<code>String</code>对象的内容指向。黑色线条代表地址指向。</strong></p><p>如上图所示。首先说一下<code>JDK6</code>中的情况，在<code>JDK6</code>中都是<code>false</code>，因为<code>JDK6</code>中串池是放在<code>Perm</code>区中，<code>Perm</code>区和<code>Heap</code>区是完全分开的。如果使用引用声明的字符串都是会直接在字符串常量池中生成，而<code>new</code>出来的<code>String</code>对象放在<code>Heap</code>区域。所以拿一个<code>Heap</code>区域的对象和字符串常量池中的对象比较是肯定不相同的。</p><h4 id="JDK8"><a href="#JDK8" class="headerlink" title="JDK8"></a>JDK8</h4><p><code>JDK8</code>中移除了<code>Perm</code>，增加了元空间。但是其实从<code>JDK7</code>开始就把字符串常量池从<code>Perm</code>区域移动到<code>Heap</code>区域了，主要是因为<code>Perm</code>区域默认大小只有4m，一旦字符串常量池中有大量对象会直接产生<code>java.lang.OutOfMemoryError: PermGen space</code>错误。</p><p><img src="/img/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F%E6%B1%A0%E5%92%8C%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%B8%B8%E9%87%8F%E6%B1%A0.assets/image-20220925210719444.png" alt="JDK8"></p><ol><li><code>String s = new String(&quot;1&quot;);</code>第一句代码生成2个对象。常量池中的“1”和<code>Heap</code>中的字符串对象。<code>s.intern();</code>去常量池中寻找发现“1“已经在常量池中了。</li><li><code>String s2 = &quot;1&quot;;</code>这句代码生成一个s2的引用指向字符串常量池中的”1“对象。结果就是s和s2的引用地址不同。</li><li><code>String s3 = new String(&quot;1&quot;) + new String(&quot;1&quot;);</code>这句代码中先生成4个对象，字符串常量池中的”1“和Heap中s3引用指向的对象。中间还有2个匿名的<code>new String(&quot;1&quot;)</code>对象。此时s3指向的对象内容是”11”，但此时字符串常量池中是没有“11”对象的。</li><li>接下来<code>s3.intern();</code>会将s3中的“11”字符串放入字符串常量池中，因为此时常量池中不存在“11”字符串。<code>JDK6</code>的做法是在常量池中直接生成一个“11”的对象。但是从<code>JDK7</code>开始常量池不在<code>Perm</code>区域了，这块做了调整。常量池中不再需要存储一份对象了，可以直接存储堆中对象的引用。这里引用直接指向s3引用的对象。也就是说引用地址相同。</li><li>最后<code>String s4 = &quot;11&quot;;</code>这里的“11”是显示声明的，因此会直接去常量池中创建，创建的时候发现已经有这个对象了，此时就是指向s3引用对象的一个引用。所以s4的引用指向和s3一样。最后比较<code>s3 == s4</code> 是<code>true</code>。</li></ol><h3 id="常量池设置"><a href="#常量池设置" class="headerlink" title="常量池设置"></a>常量池设置</h3><ul><li><code>-XX:StringTableSize</code> 可以设置字符串常量池的大小</li><li><code>-XX:+PrintStringTableStatistics</code>在JVM进程退出时，打印出StringTable的统计信息输出到gclog中.</li></ul><h2 id="包装类的常量池"><a href="#包装类的常量池" class="headerlink" title="包装类的常量池"></a>包装类的常量池</h2><h3 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h3><p><code>Java</code>中基本类型的包装类除了<code>Long</code>和<code>Double</code>之外都实现了常量池技术。具体的实现方式为在类中预先创建频繁使用的包装类对象，当需要使用某个包装类对象时，如果该对象封装的值在缓存范围内，就返回缓存对象，否则创建新的对象并返回。</p><p>缓存范围：</p><table><thead><tr><th>包装类型</th><th>基本数据类型</th><th>缓存对象（基本数据类型值）</th></tr></thead><tbody><tr><td>Boolean</td><td>boolean</td><td>true,false（全部值）</td></tr><tr><td>Byte</td><td>byte</td><td>-128~127（全部值）</td></tr><tr><td>Short</td><td>short</td><td>-128~127</td></tr><tr><td>Character</td><td>char</td><td>0~127</td></tr><tr><td>Integer</td><td>int</td><td>-128~127（默认为127）</td></tr><tr><td>Long</td><td>long</td><td>-128~127</td></tr><tr><td>Float</td><td>float</td><td>无缓存值</td></tr><tr><td>Double</td><td>double</td><td>无缓存值</td></tr></tbody></table><h3 id="Integer"><a href="#Integer" class="headerlink" title="Integer"></a>Integer</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><p><code>Integer</code>的默认缓存范围为-128到127，可以通过jvm参数改变这个范围。</p><ul><li>缓存上界high可以通过jvm参数<code>-XX:AutoBoxCacheMax=size</code>或者<code>java -D java.lang.Integer.IntegerCache.high=size TestAutoBoxCache</code>指定，取指定值与127的最大值并且不超过Integer表示范围，</li><li>下界不能指定，只能为-128。</li></ul><h4 id="问题解析"><a href="#问题解析" class="headerlink" title="问题解析"></a>问题解析</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IntegerTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i3</span> <span class="hljs-operator">=</span> <span class="hljs-number">128</span>;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i4</span> <span class="hljs-operator">=</span> <span class="hljs-number">128</span>;<br><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">100</span>);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i6</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">100</span>);<br><br>        System.out.println(i1 == i2);<br>        System.out.println(i3 == i4);<br>        System.out.println(i5 == i6);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shel">true<br>false<br>false<br></code></pre></td></tr></table></figure><p>面试的时候经常会遇到这种问题，其实就是考<code>Integer</code>类型的缓存范围，<strong>注意<code>new</code>会生成新对象无法使用缓存池</strong>。</p><h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IntegerCache</span> &#123;<br>     <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">low</span> <span class="hljs-operator">=</span> -<span class="hljs-number">128</span>;<br>     <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> high;<br>     <span class="hljs-comment">//声明为final，所以缓存的对象会放入常量池中</span><br>     <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Integer cache[];<br><br>     <span class="hljs-keyword">static</span> &#123;<br>         <span class="hljs-comment">// high value may be configured by property</span><br>         <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> <span class="hljs-number">127</span>;<br>         <span class="hljs-comment">//获取输入的最大值</span><br>         <span class="hljs-type">String</span> <span class="hljs-variable">integerCacheHighPropValue</span> <span class="hljs-operator">=</span><br>             sun.misc.VM.getSavedProperty(<span class="hljs-string">&quot;java.lang.Integer.IntegerCache.high&quot;</span>);<br>         <span class="hljs-keyword">if</span> (integerCacheHighPropValue != <span class="hljs-literal">null</span>) &#123;<br>             <span class="hljs-keyword">try</span> &#123;<br>                 <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> parseInt(integerCacheHighPropValue);<br>                 <span class="hljs-comment">//如果输入的最大值比127小 取127</span><br>                 i = Math.max(i, <span class="hljs-number">127</span>);<br>                 <span class="hljs-comment">// Maximum array size is Integer.MAX_VALUE</span><br>                 <span class="hljs-comment">//防止输入的值超过整型最大值</span><br>                 h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="hljs-number">1</span>);<br>             &#125; <span class="hljs-keyword">catch</span>( NumberFormatException nfe) &#123;<br>                 <span class="hljs-comment">// If the property cannot be parsed into an int, ignore it.</span><br>             &#125;<br>         &#125;<br>         high = h;<br><span class="hljs-comment">//计算出缓存区的数量</span><br>         cache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>[(high - low) + <span class="hljs-number">1</span>];<br>         <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> low;<br>         <span class="hljs-comment">//循环给缓存区赋值</span><br>         <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; cache.length; k++)<br>             cache[k] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(j++);<br><br>         <span class="hljs-comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span><br>         <span class="hljs-keyword">assert</span> IntegerCache.high &gt;= <span class="hljs-number">127</span>;<br>     &#125;<br><br>     <span class="hljs-keyword">private</span> <span class="hljs-title function_">IntegerCache</span><span class="hljs-params">()</span> &#123;&#125;<br> &#125;<br></code></pre></td></tr></table></figure><p>当发生自动装箱的时候，调用<code>valueOf()</code>方法，对需要包装的基本类型的值进行判断，如果在缓存范围内，则返回缓存对象，否则创建一个新的对象返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title function_">valueOf</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>    <span class="hljs-comment">//判断是否在缓存范围</span><br>    <span class="hljs-keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)<br>        <span class="hljs-keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(i);<br>&#125;<br></code></pre></td></tr></table></figure><p>其他包装类型实现方式类似，可自行查看。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://tech.meituan.com/2014/03/06/in-depth-understanding-string-intern.html">深入解析String#intern - 美团技术团队 (meituan.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java集合之List</title>
    <link href="/2022/09/18/Java%E9%9B%86%E5%90%88%E4%B9%8BList/"/>
    <url>/2022/09/18/Java%E9%9B%86%E5%90%88%E4%B9%8BList/</url>
    
    <content type="html"><![CDATA[<h1 id="Java集合之List"><a href="#Java集合之List" class="headerlink" title="Java集合之List"></a>Java集合之List</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>List</code>子接口是<code>Collection</code>中最为常用的一个子接口。</p><p><code>List</code>系列集合有索引，所以多了很多按照索引操作元素的功能</p><p><code>List</code>系列集合：</p><ul><li><code>Vector</code></li><li><code>ArrayList</code></li><li><code>LinkedList</code></li></ul><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><p><code>ArrayList</code>是比较常用的一个集合类。继承自<code>AbstractList</code>，实现了<code>List</code>接口。底层基于<strong>数组</strong>实现，容量大小动态变化。允许null值，查询快，增删慢，支持随机访问。</p><p><img src="/img/Java%E9%9B%86%E5%90%88%E4%B9%8BList.assets/ArrayList-1-768x406-1.png" alt="ArrayList"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayList</span>&lt;E&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractList</span>&lt;E&gt;<br>        <span class="hljs-keyword">implements</span> <span class="hljs-title class_">List</span>&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable<br></code></pre></td></tr></table></figure><ul><li><code>RandomAccess</code>是一个标志接口，表示是否支持<strong>快速随机访问</strong></li><li><code>Cloneable</code>克隆标志接口，同时实现<code>clone()</code>方法，能被克隆</li><li><code>Serializable</code>序列化接口，意味着<code>ArrayList</code>支持序列化，能通过序列化传输</li></ul><h3 id="常用方法："><a href="#常用方法：" class="headerlink" title="常用方法："></a>常用方法：</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>public boolean add(E e)</code></td><td>添加元素到集合的末尾</td></tr><tr><td><code>public boolean addAll(Collection&lt;? extends E&gt; c)</code></td><td>将指定的集合添加到末尾</td></tr><tr><td><code>public void clear()</code></td><td>清除集合中的所有元素</td></tr><tr><td><code>public E get(int index)</code></td><td>返回集合中指定位置的元素</td></tr><tr><td><code>public E remove(int index)</code></td><td>删除集合中指定位置的元素，并将删除的元素返回</td></tr><tr><td><code>public int size()</code></td><td>返回集合中元素的个数</td></tr><tr><td><code>public boolean isEmpty()</code></td><td>返回集合中元素的个数是否为空</td></tr><tr><td><code>public int indexOf(Object o)</code></td><td>返回元素中指定对象出现的第一个索引，不包含返回-1</td></tr><tr><td><code>public boolean contains(Object o)</code></td><td>返回集合中是否包含指定对象</td></tr></tbody></table><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><ul><li><p>构造方法：以无参的构造方法创建<code>ArrayList</code>时，实际上初始化赋值的是一个空数组。当真正对数组进行添加元素时，才真正分配容量（懒惰初始化），即向数组中添加第一个元素时，数组容量扩为10</p></li><li><p>添加元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// e 插入的元素  elementData底层数组   size 插入的位置</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>    ensureCapacityInternal(size + <span class="hljs-number">1</span>);<span class="hljs-comment">// Increments modCount!!</span><br>    elementData[size++] = e;<span class="hljs-comment">// 插入size位置，然后加一</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ensureCapacityInternal</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br>    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ensureExplicitCapacity</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br>    modCount++;<br><br>    <span class="hljs-comment">// overflow-conscious code</span><br>    <span class="hljs-keyword">if</span> (minCapacity - elementData.length &gt; <span class="hljs-number">0</span>)<br>        grow(minCapacity);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calculateCapacity</span><span class="hljs-params">(Object[] elementData, <span class="hljs-type">int</span> minCapacity)</span> &#123;<br>    <span class="hljs-comment">//判断elementData是否是空数组</span><br>    <span class="hljs-keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;<br>        <span class="hljs-comment">//如果是空数组返回默认值和传入的大小中=的最小值</span><br>        <span class="hljs-keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);<br>    &#125;<br>    <span class="hljs-keyword">return</span> minCapacity;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 判断是否需要扩容</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ensureExplicitCapacity</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br>    modCount++;<br>    <span class="hljs-comment">// 索引越界</span><br>    <span class="hljs-keyword">if</span> (minCapacity - elementData.length &gt; <span class="hljs-number">0</span>)<br>        <span class="hljs-comment">// 调用grow方法进行扩容，调用此方法代表已经开始扩容了</span><br>        grow(minCapacity);<br>&#125;<br></code></pre></td></tr></table></figure><p>指定位置新增元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> index, E element)</span> &#123;<br>    <span class="hljs-comment">//判断传入的index是否合法</span><br>    rangeCheckForAdd(index);<br>    ensureCapacityInternal(size + <span class="hljs-number">1</span>);  <span class="hljs-comment">// Increments modCount!!</span><br>    <span class="hljs-comment">// 将指定索引后的数据后移</span><br>    System.arraycopy(elementData, index, elementData, index + <span class="hljs-number">1</span>, size - index);<br>    elementData[index] = element;<br>    size++;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>扩容：扩容后的大小为<code>oldCapacity + (oldCapacity &gt;&gt; 1)</code>，<code>oldCapacity &gt;&gt; 1</code> 需要取整，所以新容量大约是旧容量的 1.5 倍左右，即 <code>oldCapacity+oldCapacity/2</code></p><p>扩容需要把原数组整个都复制到新数组中，这个操作代价很高，因此最好在创建<code>ArrayList</code>对象的时候指定合适的大小，避免频繁扩容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">grow</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br>    <span class="hljs-comment">//原数组长度</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">oldCapacity</span> <span class="hljs-operator">=</span> elementData.length;<br>    <span class="hljs-comment">//新数组长度</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">newCapacity</span> <span class="hljs-operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="hljs-number">1</span>);<br>    <span class="hljs-comment">//检查新容量是否大于最小需要容量，若小于最小需要容量，就把最小需要容量当作数组的新容量</span><br>    <span class="hljs-keyword">if</span> (newCapacity - minCapacity &lt; <span class="hljs-number">0</span>)<br>newCapacity = minCapacity;<span class="hljs-comment">//不需要扩容计算</span><br>    <span class="hljs-comment">//检查新容量是否大于最大数组容量</span><br>    <span class="hljs-keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="hljs-number">0</span>)<br>        <span class="hljs-comment">//如果minCapacity大于最大容量，则新容量则为`Integer.MAX_VALUE`</span><br>        <span class="hljs-comment">//否则，新容量大小则为 MAX_ARRAY_SIZE 即为 `Integer.MAX_VALUE - 8`</span><br>        newCapacity = hugeCapacity(minCapacity);<br>    <span class="hljs-comment">//复制元素</span><br>    elementData = Arrays.copyOf(elementData, newCapacity);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>删除元素：需要调用<code>System.arraycopy()</code>将<code>index+1</code>后面的元素都复制到<code>index</code>位置上，在旧数组上操作，该操作的时间复杂度为O(N)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> E <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-comment">//判断传入的index是否超过最大值</span><br>    rangeCheck(index);<br><span class="hljs-comment">//记录变化次数</span><br>    modCount++;<br>    <span class="hljs-comment">//查找到指定的元素</span><br>    <span class="hljs-type">E</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> elementData(index);<br><span class="hljs-comment">//计算要移动的元素个数</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">numMoved</span> <span class="hljs-operator">=</span> size - index - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (numMoved &gt; <span class="hljs-number">0</span>)<br>        <span class="hljs-comment">//移动元素</span><br>        System.arraycopy(elementData, index+<span class="hljs-number">1</span>, elementData, index,<br>                         numMoved);<br>    elementData[--size] = <span class="hljs-literal">null</span>; <span class="hljs-comment">// clear to let GC do its work</span><br><br>    <span class="hljs-keyword">return</span> oldValue;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Fail-Fast：快速失败，在<code>ArrayList</code>有两个关键的参数<code>modCount</code>、<code>expectedModCount</code>，每此修改集合(调用<code>add()、remove()、clear()</code>)，<code>modCount</code>都会增加1，<code>expectedModCount</code>则为期待的运算计数。在进行迭代或者序列化等操作时，会比较<code>modCount</code>和<code>expectedModCount</code>值是否相等，如果不等说明操作中集合被修改，抛出<code>ConcurrentModificationException</code> 异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Iterator&lt;E&gt; <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Itr</span>();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Itr</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterator</span>&lt;E&gt; &#123;<br>        <span class="hljs-type">int</span> cursor;       <span class="hljs-comment">// index of next element to return</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">lastRet</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>; <span class="hljs-comment">// index of last element returned; -1 if no such</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">expectedModCount</span> <span class="hljs-operator">=</span> modCount;<br><br>        Itr() &#123;&#125;<br><br>        <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>        <span class="hljs-keyword">public</span> E <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-comment">//检查结构是否发生变化</span><br>            checkForComodification();<br>            <span class="hljs-comment">//...</span><br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span> (lastRet &lt; <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>();<br>            <span class="hljs-comment">//检查结构是否发生变化</span><br>            checkForComodification();<br>            <span class="hljs-keyword">try</span> &#123;<br>                ArrayList.<span class="hljs-built_in">this</span>.remove(lastRet);<br>                cursor = lastRet;<br>                lastRet = -<span class="hljs-number">1</span>;<br>                <span class="hljs-comment">//删除之后重置expectedModCount</span><br>                expectedModCount = modCount;<br>            &#125; <span class="hljs-keyword">catch</span> (IndexOutOfBoundsException ex) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentModificationException</span>();<br>            &#125;<br>        &#125;<br><span class="hljs-comment">//判断modCount 如果被其他线程修改抛出并发修改异常</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkForComodification</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span> (modCount != expectedModCount)<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentModificationException</span>();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><p><code>Vector</code>类实现了一个动态数组，和<code>ArrayList</code>类似。</p><p>扩容：<code>Vector</code>的构造函数可以传入<code>capacityIncrement</code>参数，作用是扩容的时候的步长，如果这个参数小于等于0(默认0)，每次扩容的都是原数组的两倍。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Vector</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity, <span class="hljs-type">int</span> capacityIncrement)</span> <br></code></pre></td></tr></table></figure><p>对比<code>ArrayList</code>：</p><ul><li><code>Vector</code>线程安全，方法上使用了<code>synchronized</code>关键字修饰</li><li><code>Vector</code>每次扩容其大小的2倍(也可以通过构造函数指定增长的容量)，而<code>ArrayList</code>是1.5倍</li><li><code>Vector</code>类包含了许多传统的方法，这些方法不属于集合框架。如<code>indexOf(obj, start)</code></li></ul><h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p><code>LinkedList</code>采用链表结构保存对象，这种结构的优点是便于向集合中插入或者删除元素。需要频繁的向集合中插入或者删除元素时，使用<code>LinkedList</code>类比<code>ArrayList</code>效率高。但<code>LinkedList</code>随机访问元素的速度相对较慢。</p><p>链表分为单向链表和双向链表，单向链表一个<code>node</code>节点包含两个属性，当前节点的值和下一个元素的链接。</p><p><img src="/img/Java%E9%9B%86%E5%90%88%E4%B9%8BList.assets/image-20220920220135394.png" alt="单向链表"></p><p>双向链表一个<code>node</code>节点包含三个属性，当前节点的值、前一个节点的链接和后一个节点的链接。</p><p><img src="/img/Java%E9%9B%86%E5%90%88%E4%B9%8BList.assets/image-20220920221018846.png" alt="双向链表"></p><p><code>LinkedList</code>中的<code>node</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&lt;E&gt; &#123;<br>    E item;<br>    Node&lt;E&gt; next;<br>    Node&lt;E&gt; prev;<br><br>    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;<br>        <span class="hljs-built_in">this</span>.item = element;<br>        <span class="hljs-built_in">this</span>.next = next;<br>        <span class="hljs-built_in">this</span>.prev = prev;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>LinkedList</code>类结构：</p><p><img src="/img/Java%E9%9B%86%E5%90%88%E4%B9%8BList.assets/linkedlist-2020-11-16.png" alt="LinkedList"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkedList</span>&lt;E&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractSequentialList</span>&lt;E&gt;<br>    <span class="hljs-keyword">implements</span> <span class="hljs-title class_">List</span>&lt;E&gt;, Deque&lt;E&gt;, Cloneable, java.io.Serializable<br></code></pre></td></tr></table></figure><ul><li><code>Deque</code>双端队列，两端都可以进出</li><li>其他实现的接口和<code>ArrayList</code>相同</li></ul><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><p><code>LinkedList</code>除了拥有<code>List</code>集合的全部功能还拥有很多队列的方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>public boolean add(E e)</code></td><td>将元素添加到集合尾部，返回是否成功</td></tr><tr><td><code>public E poll()</code></td><td>删除并返回第一个元素</td></tr><tr><td><code>public void addFirst(E e)</code></td><td>将元素添加到集合的头部</td></tr><tr><td><code>public E getFirst()</code></td><td>获取集合中第一个元素</td></tr><tr><td><code>public void addLast(E e)</code></td><td>将元素添加到集合的尾部</td></tr><tr><td><code>public E getLast()</code></td><td>获取集合中最后一个元素</td></tr><tr><td><code>public E pop()</code></td><td>将集合中的元素出栈（后入先出）</td></tr><tr><td><code>public void push(E e)</code></td><td>将元素入栈（先入后出）</td></tr></tbody></table><h3 id="对比ArrayList"><a href="#对比ArrayList" class="headerlink" title="对比ArrayList"></a>对比ArrayList</h3><ol><li>底层结构：<ul><li><code>ArrayList</code>底层基于数组</li><li><code>LinkedList</code>底层基于双向链表（<code>JDK1.6</code>之前为循环链表，<code>JDK1.7</code>之后为双向链表）</li></ul></li><li>插入和删除：<ul><li><code>ArrayList</code>底层采用数组，对于数组中的元素插入或者删除需要移动元素，效率较低</li><li><code>LinkedList</code>底层基于双向链表，插入和删除不需要移动其他元素，效率较高</li></ul></li><li>随机访问：<ul><li><code>ArrayList</code>可以根据<code>index</code>直接获取元素O(1)，支持随机访问</li><li><code>LinkedList</code>不支持随机访问，需要移动指针一个个寻找O(n)</li></ul></li><li>内存空间：<ul><li><code>ArrayList</code>的空间浪费主要表现在<code>List</code>扩容后，不管有没有用到都会占用</li><li><code>LinkedList</code>每个节点都需要保存前驱节点和后继节点的地址以及元素值，所占空间比<code>ArrayList</code>更多</li></ul></li></ol><h3 id="性能比较"><a href="#性能比较" class="headerlink" title="性能比较"></a>性能比较</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//新增元素循环次数</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">addCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">100000</span>;<br>    <span class="hljs-comment">//获取元素次数</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">getCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><br>    <span class="hljs-type">ThreadLocalRandom</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> ThreadLocalRandom.current();<br>    <span class="hljs-type">StopWatch</span> <span class="hljs-variable">stopWatch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StopWatch</span>(<span class="hljs-string">&quot;list&quot;</span>);<br>    ArrayList&lt;Integer&gt; arrayList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    stopWatch.start(<span class="hljs-string">&quot;arrayList add&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; addCount; i++) &#123;<br>        arrayList.add(i);<br>    &#125;<br>    stopWatch.stop();<br><br>    LinkedList&lt;Integer&gt; linkedList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>    stopWatch.start(<span class="hljs-string">&quot;linkedList add&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; addCount; i++) &#123;<br>        linkedList.add(i);<br>    &#125;<br>    stopWatch.stop();<br><br>    stopWatch.start(<span class="hljs-string">&quot;arrayList random get&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; getCount; i++) &#123;<br>        arrayList.get(random.nextInt(addCount));<br>    &#125;<br>    stopWatch.stop();<br><br>    stopWatch.start(<span class="hljs-string">&quot;linkedList random get&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; getCount; i++) &#123;<br>        linkedList.get(random.nextInt(addCount));<br>    &#125;<br>    stopWatch.stop();<br>    System.out.println(stopWatch.prettyPrint());<br>&#125;<br></code></pre></td></tr></table></figure><p>控制台输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shel">StopWatch &#x27;list&#x27;: running time = 47682200 ns<br>---------------------------------------------<br>ns         %     Task name<br>---------------------------------------------<br>012813500  027%  arrayList add<br>007278300  015%  linkedList add<br>000141900  000%  arrayList random get<br>027448500  058%  linkedList random get<br><br><br>进程已结束,退出代码0<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/Seazean/JavaNote/blob/main/Java.md">JavaNote&#x2F;Java.md at main · Seazean&#x2F;JavaNote (github.com)</a></p><p><a href="https://www.runoob.com/java/java-arraylist.html">Java ArrayList | 菜鸟教程 (runoob.com)</a></p><p><a href="https://www.runoob.com/java/java-linkedlist.html">Java LinkedList | 菜鸟教程 (runoob.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java集合</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java集合</title>
    <link href="/2022/09/17/Java%E5%AE%B9%E5%99%A8/"/>
    <url>/2022/09/17/Java%E5%AE%B9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Java集合"><a href="#Java集合" class="headerlink" title="Java集合"></a>Java集合</h1><blockquote><p>容器主要包括<code>Collection</code>和<code>Map</code>两种，<code>Collection</code>存储着对象的集合，而<code>Map</code>存储着键值对（两个对象）的映射表。</p></blockquote><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><blockquote><p>数据结构是计算机存储、组织数据的方式。数据结构是指相互之间存在一种或者多种特定关系的数据元素的集合。通常情况下，精心选择的数据结构可以带来更高的运行或者存储效率。数据结构往往同高效的检索算法和索引技术相关。</p></blockquote><p>数据存储常用的结构有：数组、栈、队列、链表、树</p><ul><li>数组：数组是在内存中的区域是连续的，分成若干等分大小相同的区域<ul><li>优点：查询速度快（根据索引直接查找，时间复杂度O(1)）</li><li>缺点：增删元素慢（需要移动其他元素）</li></ul></li><li>栈：先进后出（FILO）</li><li>队列：先进先出（FIFO）</li><li>链表：链表在内存中的区域不是连续的，每个元素都会记录下一个元素的地址<ul><li>优点：增删元素速度快</li><li>缺点：查询速度慢，每个元素所占内存较大（需要存储其他节点地址信息）</li></ul></li><li>树：<ul><li>二叉树：二叉树只有一个根节点，每个节点最多只能有两个子树，且有左右之分<ul><li>优点：查询效率较高，平均时间复杂度O(lgn)</li><li>缺点：不自动调整，导致查询效率不稳定，极端情况下会退化成链表O(n)</li></ul></li><li>平衡二叉树（AVL）：AVL是严格的平衡二叉树，所有节点的左右子树高度差不能超过1；AVL树查找、插入和删除的平均和最坏情况都是O(lgn)<ul><li>优点：查询效率稳定，避免了二叉树出现的极端情况</li><li>缺点：由于太过严格，每次增删有可能破坏AVL树的平衡，需要旋转来调整树的平衡；在删除操作多时，维护平衡的代价可能高于其带来的好处，因此AVL树实际使用不多</li></ul></li><li>红黑树：与AVL树相比，红黑树并不追求严格的平衡，而是大致的平衡。<ul><li>优点：相比较AVL树，删除效率大大提高，当插入或删除数据时，只需要进行O(1)次数的旋转以及变色就能保证基本平衡，总的来说红黑树的统计性能高于AVL树，因此在实际应用中，AVL树使用的相对较少，而红黑树的使用非常广泛。</li><li>缺点：读取略逊于AVL树</li></ul></li></ul></li></ul><p>各数据结构时间复杂度对比：</p><p><img src="/img/Java%E5%AE%B9%E5%99%A8.assets/image-20220917205613155.png" alt="复杂度对比"></p><p>图片来源：<a href="https://www.bigocheatsheet.com/">https://www.bigocheatsheet.com/</a></p><h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>在编程时，可以使用数组来保存多个对象，但是数组的长度不可变化，一旦在初始化数组时指定了数组长度，这个长度就是不可变的。</p><p>为了保存不确定的数据，<code>Java</code>提供了集合类。集合类是一个大小可变的容器，主要负责保存其他数据，容器中的每个数据称为一个元素，因此集合也被称为容器类。</p><p><code>Java</code>所有的集合类都位于<code>Java.util</code>包下，提供了一个表示和操作对象集合的统一框架，包含大量集合接口，以及这些接口的实现类和操作它们的方法。</p><p>集合与数组的区别：</p><ul><li>数组的长度不可变，集合的长度可以变化</li><li>数组可以保存基本数据类型和引用类型，集合只能保存引用类型</li></ul><p><code>Java</code>中的集合代表是<code>Collection</code>,<code>Collection</code>主要有三个子接口，分别为<code>Set</code>、<code>List</code>、<code>Queue</code>。其中<code>List</code>和<code>Queue</code>中的元素可以重复，而<code>Set</code>中的元素不可重复。</p><p><img src="/img/Java%E5%AE%B9%E5%99%A8.assets/image-20191208220948084.png" alt="Collection"></p><h3 id="1-Set"><a href="#1-Set" class="headerlink" title="1.Set"></a>1.Set</h3><blockquote><p><code>Set</code>集合：添加的元素是无序、不重复、无索引</p></blockquote><ul><li><code>TreeSet</code>：基于<code>TreeMap</code>实现，查找效率O(lgn)慢于<code>HashSet</code>O(1)，集合中元素有序</li><li><code>HashSet</code>：基于<code>HashMap</code>实现，支持快速查找，集合中元素无序</li><li><code>LinkedHashSet</code>：基于<code>LinkedHashMap</code>实现，在<code>HashMap</code>的基础上，增加了一个双向链表来记录元素添加顺序。</li></ul><h3 id="2-List"><a href="#2-List" class="headerlink" title="2.List"></a>2.List</h3><blockquote><p>List集合：添加的元素有序、可重复、有索引</p></blockquote><ul><li><code>ArrayList</code>：基于动态数组实现，支持随机访问</li><li><code>Vector</code>：历史遗留类和<code>ArrayList</code>类似，但它是线程安全的，效率低</li><li><code>LinkedList</code>：基于双向链表实现，只能顺序访问，可以快速的在链表中间增删数据。不仅如此，<code>LinkedList</code>还可以用作栈、队列和双向队列</li></ul><h3 id="3-Queue"><a href="#3-Queue" class="headerlink" title="3.Queue"></a>3.Queue</h3><blockquote><p>Queue：支持FIFO，尾部添加、头部删除，和我们生活中排队类似</p></blockquote><ul><li><code>LinkedList</code>：<code>LinkedList</code>类实现了<code>Queue</code>接口，因此我们可以把它当作<code>Queue</code>使用</li><li><code>PriorityQueue</code>：基于堆结构实现，优先队列，可以根据规则排序</li></ul><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p><code>Map</code>是一种键值对（<code>key</code>-<code>value</code>）集合,<code>Map</code>集合中的每一个元素都包含一个键对象和一个值对象。其中，键对象不允许重复，而值对象可以重复。</p><p><img src="/img/Java%E5%AE%B9%E5%99%A8.assets/image-20201101234335837.png" alt="Map结构"></p><ul><li><code>TreeMap</code>：基于红黑树实现，查找效率O(lgn)，集合中的元素有序</li><li><code>HashMap</code>：基于哈希表实现，查找效率高O(1)，集合中的元素无序</li><li><code>HashTable</code>：和<code>HashMap</code>类似，但是线程安全，历史遗留类，效率较低，不建议使用</li><li><code>LinkedHashMap</code>：使用双向链表来维护元素的顺序</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java集合</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java中的字符串</title>
    <link href="/2022/09/12/Java%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2022/09/12/Java%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="Java中的字符串"><a href="#Java中的字符串" class="headerlink" title="Java中的字符串"></a>Java中的字符串</h1><p>Java提供了<code>String</code>、<code>StringBuffer</code>和<code>StringBuilder</code>类来封装字符串，并提供了一系列操作字符串对象的方法。它们的相同点都是用来封装字符串；并且都实现了<code>CharSequence</code>接口。</p><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p><code>String</code>类的<code>value</code>数组被声明为<code>final</code>，这意味着<code>value</code>数组初始化之后不能再引用其他数组，并且<code>String</code>内部没有改变<code>value</code>数组的方法，因此可以保证<code>String</code>不可变，同时保证线程安全。<code>String</code>类被声明为<code>final</code>，因此不可被继承。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">String</span><br>    <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.io.Serializable, Comparable&lt;String&gt;, CharSequence &#123;<br>    <span class="hljs-comment">/** The value is used for character storage. */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">char</span> value[];<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注：</strong>不可变的意思是每次更改都会产生新的字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;a&quot;</span>; <br>s += <span class="hljs-string">&quot;b&quot;</span>;<br></code></pre></td></tr></table></figure><p>以上代码会线程一个字符串”a”对象，并且s指向该对象。然后再生成一个字符串”ab”对象，把s的指向地址改为”ab”对象。</p><h2 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h2><p><code>StringBuffer</code>为字符串变量（线程安全），如果要频繁的对字符串内容进行修改，处于效率考虑最好使用可<code>StringBuffer</code>，如果想转成<code>String</code>类型，可以调用<code>StringBuffer.toString()</code>方法。</p><p><code>StringBuffer</code>上的主要操作是<code>append</code>和<code>insert</code>方法，可重载这些方法以接受任意类型的数据。每个方法都能有效的将给定的数据转换成字符串，然后将该字符串的字符添加或者插入到字符串缓冲区中。</p><ul><li><code>append</code>方法始终将这些字符添加到缓冲区的末端</li><li><code>insert</code>方法则在指定的位置添加字符</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-string">&quot;abc&quot;</span>); <span class="hljs-comment">//生成字符串abc</span><br>    s.append(<span class="hljs-string">&quot;e&quot;</span>); <span class="hljs-comment">//abce</span><br>    s.insert(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;d&quot;</span>);<span class="hljs-comment">//abcde</span><br>    System.out.println(s);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h2><p><code>StringBuilder</code>字符串变量（非线程安全），JDK5.0新增，此类提供一个与<code>StringBuffer</code>兼容的API，但不保证同步。</p><p>在单线程的情况下使用较普遍。</p><p>在大部分情况下<code>StringBuilder &gt; StringBuffer</code>。这主要是因为前者不需要考虑线程安全。</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>三者区别：</p><ul><li><code>String</code>不可变字符串，线程安全</li><li><code>StringBuffer</code>可变的字符串，线程安全，方法上加<code>synchronized</code>关键字，效率较低</li><li><code>StringBuilder</code>可变的字符串，非线程安全，效率较高</li></ul><p>相同点：</p><ul><li>都实现了<code>CharSequence</code>接口</li><li>底层使用<code>char[]</code>存储字符串</li></ul><p>构造方法：</p><ul><li><code>String</code>:</li><li><code>String str = new String(String str);</code>根据输入内容创建不可变的字符串对象</li><li><code>String str = &quot;str&quot;;</code>直接根据字符串的值创建不可变的字符串对象</li><li><code>StringBuffer</code>:<ul><li><code>StringBuffer str = new StringBuffer(String str)</code>根据字符串的内容，来创建可变字符串对象</li><li><code>StringBuffer str = new StringBuffer()</code>创建一个空白的可变字符串对象</li></ul></li><li><code>StringBuilder</code><ul><li><code>StringBuffer str = new StringBuffer(String str)</code>根据字符串的内容，来创建可变字符串对象</li><li><code>StringBuffer str = new StringBuffer()</code>创建一个空白的可变字符串对象</li></ul></li></ul><p><strong>应该怎么选择</strong>：在执行效率方面，<code>StringBuilder</code>最高，<code>Stringbuffer</code>其次，<code>String</code>最低。</p><ul><li>当可以确定字符是不需要改变的或者修改的次数很少那么选择<code>String</code></li><li>如果需要频繁的对字符串进行修改，那么从<code>StringBuffer</code>或者<code>StringBuilder</code>中选择</li><li>优先选择<code>StringBuilder</code>，因为其效率最高，但是当需要保证线程安全时，就要选择<code>StringBuffer</code></li><li>当大致知道整个字符串长度的时候，那么就可以使用<code>StringBuilder</code>带参数的构造参数，就会在构造对象的时候创建指定长度的数组，避免不断扩容导致的底层数组不断复制</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基本数据类型</title>
    <link href="/2022/09/11/Java%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2022/09/11/Java%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Java基本数据类型"><a href="#Java基本数据类型" class="headerlink" title="Java基本数据类型"></a>Java基本数据类型</h1><h2 id="Java中的八种基本类型"><a href="#Java中的八种基本类型" class="headerlink" title="Java中的八种基本类型"></a>Java中的八种基本类型</h2><table><thead><tr><th>类型</th><th>字节</th><th>默认值</th></tr></thead><tbody><tr><td>byte</td><td>1</td><td>0</td></tr><tr><td>short</td><td>2</td><td>0</td></tr><tr><td>int</td><td>4</td><td>0</td></tr><tr><td>long</td><td>8</td><td>0L</td></tr><tr><td>float</td><td>4</td><td>0.0f</td></tr><tr><td>double</td><td>8</td><td>0.0d</td></tr><tr><td>char</td><td>2</td><td>false</td></tr><tr><td>boolean</td><td>1或者4</td><td>\u0000</td></tr></tbody></table><p>  <strong>注：</strong>《Java虚拟机规范》指出boolean当作int处理4个字节，和 boolean 数组当作byte数组处理 1 个字节，具体还要看虚拟机实现是否按照规范来，所以 1 个字节、4 个字节都是有可能的。</p><h2 id="数据的类型转换"><a href="#数据的类型转换" class="headerlink" title="数据的类型转换"></a>数据的类型转换</h2><h3 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h3><h4 id="上下转型"><a href="#上下转型" class="headerlink" title="上下转型"></a>上下转型</h4><p>Java中不能隐式执行向下转型，因为这会使数据表示精度降低，但是可以向上转型，并且遵循以下规则：</p><ul><li>整型、常量、浮点型、字符型数据可以混合运算。</li><li>运算中，不同类型的数据先转换为同一类型，然后进行运算。</li><li>转换等级数据精度由低到高。</li><li>转换等级由低到高：byte，short，char-&gt;int-&gt;long-&gt;float-&gt;double</li></ul><h4 id="表达式数据类型自动提升"><a href="#表达式数据类型自动提升" class="headerlink" title="表达式数据类型自动提升"></a>表达式数据类型自动提升</h4><p>表达式的数据类型自动提升，关于类型的自动提升，注意下面的规则：</p><ul><li>所有的byte、short、char类型的值被提升为int</li><li>如果有一个操作数是long，计算结果是long。</li><li>如果有一个操作数是float，计算结果是float。</li><li>如果有一个操作数是double，计算结果是double。</li></ul><p><strong>注：</strong> 以上规则当存在多个数据类型根据将转换成等级最高的数据类型。</p><h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><p>将范围大的数据转换为小数据时，可以使用强制类型转换，这种转换可能会导致溢出或者精度下降。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">123</span>;<br>    <span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> (<span class="hljs-type">byte</span>)i;<span class="hljs-comment">//强制类型转换为byte</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="隐式强制类型转换"><a href="#隐式强制类型转换" class="headerlink" title="隐式强制类型转换"></a>隐式强制类型转换</h3><ul><li>整数的默认类型是int。</li><li>浮点型默认是double，在定义float类型必须在数字后面跟上F或者f。</li></ul><h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><p>引用数据类型：类，接口，数组都是引用数据类型。</p><p>引用类型的特点：</p><ul><li>引用类型作为类首先继承Object，拥有了Object类的方法。</li><li>引用类型的变量可以存储null值。</li></ul><p>Java中的基本数据类型都有对应的包装类。</p><table><thead><tr><th>基本数据类型</th><th>包装类</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>boolean</td><td>Boolean</td></tr></tbody></table><p>Java为包装类做了一些特殊功能：</p><ul><li><p>可以把基本数据类型的转换成字符串类型的值</p><ol><li>调用对应<strong>包装类实体</strong>.toString()方法，如<code>Integer i = 1;String s = i.toString();</code></li><li>调用对应的<strong>包装类型</strong>.toString(基本数据类型的值)，如<code>String s = Integer.toString(1);</code></li><li>直接把基本数据类型拼接字符串，如<code>int i = 0; String s = i+&quot;&quot;;</code></li></ol></li><li><p>可以把字符串类型的数值转换成对应的基本数据类型的值</p><ol><li><strong>包装类型</strong>.parse<strong>对应类型</strong>(“字符串的值”)，如<code>Integer.parseInt(&quot;1&quot;);</code></li><li><strong>包装类型</strong>.valueOf(“字符串的值”)，如<code>Integer.valueOf(&quot;1&quot;);</code></li></ol></li></ul><h3 id="类型对比"><a href="#类型对比" class="headerlink" title="类型对比"></a>类型对比</h3><ul><li><p>有了基本数据类型，为为什么还要包装类型？</p><blockquote><p>引用类型封装了数据和处理该数据的方法</p><p>Java中大部分类和方法都是针对引用数据类型，包括泛型和集合。</p><p>基本类型有默认值，无法表示空null。</p></blockquote></li><li><p>引用类型包括了基本类型的功能，为什么还用基本类型？</p><blockquote><p>引用类型的对象要多存储对象头，对基本类型来说空间浪费率太高。逻辑上讲，Java只要包装类就够了，但是为了运行速度，需要用到基本数据类型；优先考虑运行效率问题，所以二者同时存在是合乎情理的。</p></blockquote></li><li><p>&#x3D;&#x3D;</p><blockquote><p>基本类型：比较的是具体的值</p><p>引用类型：比较的是对象的地址</p></blockquote></li></ul><h3 id="自动装箱与拆箱"><a href="#自动装箱与拆箱" class="headerlink" title="自动装箱与拆箱"></a>自动装箱与拆箱</h3><blockquote><p>Java是一门面向对象的编程语言，所以除了8大基础类型之外一切皆为对象，但为了方便面向对象开发，基础类型也有对应的包装类。但包装类和基础类型在赋值或比较时要进行类型转换，使用起来不够丝滑，感觉他们之间有很大的鸿沟。所以jdk1.5之后就推出了自动装箱和自动拆箱机制，使卡覅更加方便，代码更加简洁。</p><p>自动装箱就是在编译时自动将基础类型转换与之对应的包装类，而拆箱刚好与之相反，就是在编译时自动将包装类转换为与之对应的基础类型。</p></blockquote><p>自动装箱拆箱要点：</p><ul><li>自动装箱时编译器调用<code>valueOf</code>将基本类型转换成对象，同时自动拆箱时，编译器通过调用类似<code>intValue()</code> 、<code>doubleValue()</code>等这类的方法将对象转换成基本类型。</li></ul><h4 id="何时自动装箱和拆箱"><a href="#何时自动装箱和拆箱" class="headerlink" title="何时自动装箱和拆箱"></a>何时自动装箱和拆箱</h4><p>自动装箱和拆箱在Java中很常见，比如有一个方法，接受一个对象类型的参数，如果我们传入一个基本类型，那么Java会自动将这个基本类型的值转换成与之对应的包装类型。</p><p>以下两种情况会发生自动装箱</p><ul><li>基本类型作为参数传递给相应的包装类型方法</li><li>基本类型分配到对应的包装类型变量</li></ul><p>以下四种情况会发生自动拆箱：</p><ul><li>包装类型作为参数传递给基本类型的方法</li><li>包装类型分配到基本类型的变量</li><li>在进行+,-时也会发生自动拆箱，因为Integer或者其他包装类型对象无法使用运算符。</li><li>在使用三目运算符的情况下，可能会发生自动拆箱。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>list.add(<span class="hljs-number">1</span>);<span class="hljs-comment">//自动装箱</span><br>list.add(<span class="hljs-number">2</span>);<span class="hljs-comment">//自动装箱</span><br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> list.get(<span class="hljs-number">0</span>);<span class="hljs-comment">//自动拆箱</span><br></code></pre></td></tr></table></figure><h4 id="自动装箱和自动拆箱的优缺点"><a href="#自动装箱和自动拆箱的优缺点" class="headerlink" title="自动装箱和自动拆箱的优缺点"></a>自动装箱和自动拆箱的优缺点</h4><p><strong>优点:</strong></p><ul><li>自动拆箱和自动装箱的引入方便了我们编写程序，提高编程效率</li></ul><p><strong>缺点:</strong></p><ul><li>由于包装类型是对象，可能存在空指针异常</li><li>自动拆箱会消耗性能，在性能敏感且操作数量大的情况下，性能会明显下降</li></ul><p><strong>所以建议要避免无意义的拆箱、装箱。</strong></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一篇博客</title>
    <link href="/2022/09/10/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/09/10/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="第一篇博客"><a href="#第一篇博客" class="headerlink" title="第一篇博客"></a>第一篇博客</h1><p>欢迎来到Lyice’s的博客</p><h2 id="写在最前面"><a href="#写在最前面" class="headerlink" title="写在最前面"></a>写在最前面</h2><p>本人从2017年底开始实习到现在已经工作好几年了，但是发现自己主要是在写一些偏业务上的代码。期间也跟着视频或者文章学过一些新的技术栈，但是一般都是跟着视频实践，没有真正应用到项目中。加上看过之后长时间用不到，感觉学了没多久就忘记了。所以一直想写一个博客记录下来，但是基于各种原因一直拖延到现在。加上之前想着多写几篇一起发，但是电脑坏了重装系统后写的文章都没了，所以改变了一下思路，想着每写一个文章就发一篇。</p><p>同时写博客也是达到一个自我驱动的目的，本人平时就是间接性踌躇满志，持续性混吃等死的状态。所以也希望通过写博客能让自己坚持持续的学习。</p><h2 id="当下情况"><a href="#当下情况" class="headerlink" title="当下情况"></a>当下情况</h2><p>目前的技术足够应付日常的开发情况，但是想要更进一步写出简单易懂、效率高、拓展性好的代码还是比较吃力。加上国内的就业形势，为了以后不被优化，计划利用每周空闲时间来给自己充电学习。持续的提高自己的不可替代性。</p><h2 id="近期计划"><a href="#近期计划" class="headerlink" title="近期计划"></a>近期计划</h2><ul><li>从java基础开始梳理一下，然后通过博客记录下来</li><li>梳理完java基础之后重点看下java并发</li><li>在不加班的情况下保持每天学习记录笔记最后形成博客</li></ul><h2 id="未来方向"><a href="#未来方向" class="headerlink" title="未来方向"></a>未来方向</h2><p>争取通过自己的努力进一个自研、待遇福利都不错的公司干到退休。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><blockquote><p> <strong>种一棵树最好的时间是十年前，其次是现在</strong></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
